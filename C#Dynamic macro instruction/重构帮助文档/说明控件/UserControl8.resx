<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <data name="uiRichTextBox1.Text" xml:space="preserve">
    <value> //==============================================================
    //  作者：BAtoDA
    //  时间：2021/2/6 17:51:48 
    //  文件名：Data_Class 
    //  版本：V1.0.1  
    //  说明： 主要用于数据转换 
    //  修改者：***
    //  修改说明： 
    //==============================================================
    class Data_Class
    {
        /// &lt;summary&gt;
        /// 字符串转INT32类型
        /// &lt;/summary&gt;
        public static int String_TO_Int32(string Vaule)
        {
            try
            {
                return Convert.ToInt32(Vaule);
            }
            catch
            {
                return 0;
            }
        }
        /// &lt;summary&gt;
        /// 字符串转INT16类型
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static short String_TO_Int16(string Vaule)
        {
            try
            {
                return Convert.ToInt16(Vaule);
            }
            catch
            {
                return 0;
            }
        }
        /// &lt;summary&gt;
        /// int32类型转string字符串类型
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Int32_TO_String(int Vaule)
        {
            try
            {
                return Convert.ToString(Vaule);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// int16类型转string字符串类型
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Int16_TO_String(short Vaule)
        {
            try
            {
                return Convert.ToString(Vaule);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// Byet类型转string字符串类型
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Byet_TO_String(byte Vaule)
        {
            try
            {
                return Convert.ToString(Vaule);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// int32转二进制字符串
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Int32_TO_Binary(int Vaule)
        {
            try
            {
                return Convert.ToString(Vaule,2);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// int16转二进制字符串
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Int16_TO_Binary(short Vaule)
        {
            try
            {
                return Convert.ToString(Vaule,2);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// byet转二进制字符串
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Byet_TO_Binary(byte Vaule)
        {
            try
            {
                return Convert.ToString(Vaule, 2);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// String字符串转二进制字符串
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string String_TO_Binary(string Vaule)
        {
            try
            {
                return Convert.ToString(Convert.ToInt32(Vaule), 2);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// Float浮点小数转二进制字符串
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static string Float_TO_Binary(float Vaule)
        {
            try
            {
                return Convert.ToString(Convert.ToInt32(Vaule), 2);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// Float浮点转Int32
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static int Float_TO_Int32(float Vaule)
        {
            try
            {
                return Convert.ToInt32(Vaule);
            }
            catch
            {
                return 0;
            }
        }
        /// &lt;summary&gt;
        /// Float浮点转Int16
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static short Float_TO_Int16(float Vaule)
        {
            try
            {
                return Convert.ToInt16(Vaule);
            }
            catch
            {
                return 0;
            }
        }
        /// &lt;summary&gt;
        /// Float浮点转String
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static String Float_TO_String(float Vaule)
        {
            try
            {
                return Convert.ToString(Vaule);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// Int10进制转Hex16进制
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static String Int_TO_Hex(int Vaule)
        {
            try
            {
                return Vaule.ToString("X");
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// Byet[]数组转string字符串
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static String ByetArray_TO_String(Byte[] Value)
        {
            try
            {
                return BitConverter.ToString(Value);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// Byet[]数组转string字符串
        /// &lt;/summary&gt;
        /// &lt;param name="Value"&gt;传入字节数组&lt;/param&gt;
        /// &lt;param name="le"&gt;需要转换的起始地址&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static String ByetArray_TO_String(Byte[] Value,int le)
        {
            try
            {
                return BitConverter.ToString(Value, le);
            }
            catch
            {
                return "0";
            }
        }
        /// &lt;summary&gt;
        /// Byet[]数组转int类型
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static int ByetArray_TO_Int32(Byte[] Value)
        {
            try
            {
                return BitConverter.ToInt32(Value, 0);
            }
            catch
            {
                return 0;
            }
        }
        /// &lt;summary&gt;
        /// Byet[]数组转int类型
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;param name="le"&gt;需要转换的起始地址&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static int ByetArray_TO_Int32(Byte[] Value,int le)
        {
            try
            {
                return BitConverter.ToInt32(Value, le);
            }
            catch
            {
                return 0;
            }
        }
        /// &lt;summary&gt;
        /// string字符串转Byet[]数组
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static Byte[] String_TO_ByetArray(string Vaule)
        {
            try
            {
                return Encoding.UTF8.GetBytes(Vaule);
            }
            catch
            {
                return new byte[] { 0};
            }
        }
        /// &lt;summary&gt;
        /// int转Byet[]数组
        /// &lt;/summary&gt;
        /// &lt;param name="Vaule"&gt;&lt;/param&gt;
        /// &lt;returns&gt;&lt;/returns&gt;
        public static Byte[] Int_TO_ByetArray(int Vaule)
        {
            try
            {
                return BitConverter.GetBytes(Vaule);
            }
            catch
            {
                return new byte[] { 0 };
            }
        }
    }</value>
  </data>
</root>