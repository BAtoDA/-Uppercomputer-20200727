<?xml version="1.0"?>
<doc>
    <assembly>
        <name>HslCommunication</name>
    </assembly>
    <members>
        <member name="T:HslCommunication.BasicFramework.FormPortraitSelect">
            <summary>
            一个正方形图形选择窗口，可以获取指定的分辨率
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.FormPortraitSelect.HasPicture">
            <summary>
            是否有图片存在
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.FormPortraitSelect.RectangleSelected">
            <summary>
            已选择的图形大小
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.FormPortraitSelect.RectangleImage">
            <summary>
            在控件显示的图片的大小，按照比例缩放以后
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.LoadPictureFile(System.String)">
            <summary>
            增加一张图片的路径
            </summary>
            <param name="picPath"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.GetSpecifiedSizeImage(System.Int32)">
            <summary>
            获取指定大小的图片，该图片将会按照比例压缩
            </summary>
            <param name="size">图片的横向分辨率</param>
            <returns>缩放后的图形</returns>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormPortraitSelect.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPortraitSelect.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftCacheArrayBase">
            <summary>
            内存队列的基类
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftCacheArrayBase.DataBytes">
            <summary>
            字节数据流
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftCacheArrayBase.ArrayLength">
            <summary>
            数据的长度
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftCacheArrayBase.HybirdLock">
            <summary>
            数据数组变动时的数据锁
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayBase.LoadFromBytes(System.Byte[])">
            <summary>
            用于从保存的数据对象初始化的
            </summary>
            <param name="dataSave"></param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayBase.GetAllData">
            <summary>
            获取原本的数据字节
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftCacheArrayLong">
            <summary>
            一个内存队列缓存的类，数据类型为Int64
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftCacheArrayLong.DataArray">
            <summary>
            数据的本身面貌
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayLong.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化一个数据对象
            </summary>
            <param name="capacity"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayLong.LoadFromBytes(System.Byte[])">
            <summary>
            用于从保存的数据对象初始化的
            </summary>
            <param name="dataSave"></param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayLong.AddValue(System.Int64)">
            <summary>
            线程安全的添加数据
            </summary>
            <param name="value">值</param>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftCacheArrayInt">
            <summary>
            一个内存队列缓存的类，数据类型为Int32
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftCacheArrayInt.DataArray">
            <summary>
            数据的本身面貌
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayInt.#ctor(System.Int32,System.Int32)">
            <summary>
            实例化一个数据对象
            </summary>
            <param name="capacity"></param>
            <param name="defaultValue"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayInt.LoadFromBytes(System.Byte[])">
            <summary>
            用于从保存的数据对象初始化的
            </summary>
            <param name="dataSave"></param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayInt.AddValue(System.Int32)">
            <summary>
            线程安全的添加数据
            </summary>
            <param name="value">值</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftCacheArrayInt.GetIntArray">
            <summary>
            安全的获取数组队列
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.Exception`1">
            <summary>
            一个自定义的支持序列化反序列化的异常类，具体用法参照第四版《CLR Via C#》P414
            </summary>
            <typeparam name="TExceptionArgs"></typeparam>
        </member>
        <member name="F:HslCommunication.BasicFramework.Exception`1.c_args">
            <summary>
            用于反序列化的
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.Exception`1.Args">
            <summary>
            消息
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.#ctor(System.String,System.Exception)">
            <summary>
            实例化一个异常对象
            </summary>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.#ctor(`0,System.String,System.Exception)">
            <summary>
            实例化一个异常对象
            </summary>
            <param name="args"></param>
            <param name="message"></param>
            <param name="innerException"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.GetObjectData(System.Runtime.Serialization.SerializationInfo,System.Runtime.Serialization.StreamingContext)">
            <summary>
            获取存储对象的序列化数据
            </summary>
            <param name="info"></param>
            <param name="context"></param>
        </member>
        <member name="P:HslCommunication.BasicFramework.Exception`1.Message">
            <summary>
            获取描述当前异常的消息
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.Equals(System.Object)">
            <summary>
            确定指定的object是否等于当前的object
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.Exception`1.GetHashCode">
            <summary>
            用作特定类型的哈希函数
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.ExceptionArgs">
            <summary>
            异常消息基类
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.ExceptionArgs.Message">
            <summary>
            获取消息文本
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormAuthorAdvertisement">
            <summary>
            显示作者一些信息的类，应当在软件系统中提供一处链接显示原作者信息，或者以彩蛋方式实现
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.#ctor">
            <summary>
            实例化一个窗口，显示作者的相关信息
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormAuthorAdvertisement.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorAdvertisement.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormAuthorize">
            <summary>
            用来测试版软件授权的窗口
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.#ctor(HslCommunication.BasicFramework.SoftAuthorize,System.String,System.Func{System.String,System.String})">
            <summary>
            实例化授权注册窗口
            </summary>
            <param name="authorize"></param>
            <param name="aboutCode">提示关于怎么获取注册码的信息</param>
            <param name="encrypt">加密的方法</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormAuthorize.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormAuthorize.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.FormPopup">
            <summary>
            一个用于消息弹出显示的类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.AddNewForm(HslCommunication.BasicFramework.FormPopup)">
            <summary>
            新增一个显示的弹出窗口
            </summary>
            <param name="form"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.ResetLocation">
            <summary>
            重置所有弹出窗口的位置
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String,System.Drawing.Color)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
            <param name="infocolor">文本的颜色</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.#ctor(System.String,System.Drawing.Color,System.Int32)">
            <summary>
            实例化一个窗口信息弹出的对象
            </summary>
            <param name="infotext">需要显示的文本</param>
            <param name="infocolor">文本的颜色</param>
            <param name="existTime">指定窗口多少时间后消失，单位毫秒</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.LocationUpMove">
            <summary>
            窗体的位置进行向上调整
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.LocationUpMove(System.Int32)">
            <summary>
            窗体的位置进行向上调整
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.FormPopup.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.FormPopup.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftAnimation">
            <summary>
            系统框架支持的一些常用的动画特效
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAnimation.TimeFragment">
            <summary>
            最小的时间片段
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAnimation.BeginBackcolorAnimation(System.Windows.Forms.Control,System.Drawing.Color,System.Int32)">
            <summary>
            调整控件背景色
            </summary>
            <param name="control">控件</param>
            <param name="color">设置的颜色</param>
            <param name="time">时间</param>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftAuthorize">
            <summary>
            软件授权类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.#ctor">
            <summary>
            实例化一个软件授权类
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftAuthorize.TextCode">
            <summary>
            注册码描述文本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.IsReleaseVersion">
            <summary>
            是否正式发行版，是的话就取消授权
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.HasLoadByFile">
            <summary>
            指示是否加载过文件信息
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftAuthorize.IsSoftTrial">
            <summary>
            指示系统是否处于试用运行
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.GetMachineCodeString">
            <summary>
            获取本机的机器码
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.ToSaveString">
            <summary>
            获取需要保存的数据内容
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.LoadByString(System.String)">
            <summary>
            从字符串加载数据
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.SaveToFile">
            <summary>
            使用特殊加密算法加密数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.LoadByFile">
            <summary>
            使用特殊解密算法解密数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.CheckAuthorize(System.String,System.Func{System.String,System.String})">
            <summary>
            检查该注册码是否是正确的注册码
            </summary>
            <param name="code"></param>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否注册成功</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.IsAuthorizeSuccess(System.Func{System.String,System.String})">
            <summary>
            检测授权是否成功
            </summary>
            <param name="encrypt">数据加密的方法，必须用户指定</param>
            <returns>是否成功授权</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftAuthorize.GetInfo">
            <summary>
            获取本计算机唯一的机器码
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftFileSaveBase">
            <summary>
            文件存储功能的基类，包含了文件存储路径，存储方法等
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftFileSaveBase.HybirdLock">
            <summary>
            一个用于读写同步的混合线程锁
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftFileSaveBase.LogHeaderText">
            <summary>
            在日志保存时的标记当前调用类的信息
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.ToSaveString">
            <summary>
            获取需要保存的数据，需要重写实现
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByString(System.String)">
            <summary>
            从字符串加载数据，需要重写实现
            </summary>
            <param name="content">字符串数据</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByFile">
            <summary>
            不使用解密方法从文件读取数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.LoadByFile(System.Converter{System.String,System.String})">
            <summary>
            使用用户自定义的解密方法从文件读取数据
            </summary>
            <param name="decrypt">用户自定义的解密方法</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.SaveToFile">
            <summary>
            不使用加密方法保存数据到文件
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftFileSaveBase.SaveToFile(System.Converter{System.String,System.String})">
            <summary>
            使用用户自定义的加密方法保存数据到文件
            </summary>
            <param name="encrypt">用户自定义的加密方法</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftFileSaveBase.FileSavePath">
            <summary>
            文件存储的路径
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftFileSaveBase.ILogNet">
            <summary>
            日志记录类
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftBasic">
            <summary>
            一个软件基础类，提供常用的一些静态方法
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.CalculateFileMD5(System.String)">
            <summary>
            获取文件的md5码
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.CalculateStreamMD5(System.IO.Stream)">
            <summary>
            获取数据流的md5码
            </summary>
            <param name="stream">数据流，可以是内存流，也可以是文件流</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.CalculateStreamMD5(System.Drawing.Bitmap)">
            <summary>
            获取内存图片的md5码
            </summary>
            <param name="bitmap">内存图片</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetSizeDescription(System.Int64)">
            <summary>
            从一个字节大小返回带单位的描述
            </summary>
            <param name="size"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.AddArrayData``1(``0[]@,``0[],System.Int32)">
            <summary>
            一个通用的数组新增个数方法，会自动判断越界情况，越界的情况下，会自动的截断或是填充
            </summary>
            <typeparam name="T">数据类型</typeparam>
            <param name="array">原数据</param>
            <param name="data">等待新增的数据</param>
            <param name="max">原数据的最大值</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetEnumValues``1">
            <summary>
            获取一个枚举类型的所有枚举值，可直接应用于组合框数据
            </summary>
            <typeparam name="TEnum">枚举的类型值</typeparam>
            <returns>枚举值数组</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetValueFromJsonObject``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            一个泛型方法，提供json对象的数据读取
            </summary>
            <typeparam name="T">读取的泛型</typeparam>
            <param name="json">json对象</param>
            <param name="value_name">值名称</param>
            <param name="default_value">默认值</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.JsonSetValue``1(Newtonsoft.Json.Linq.JObject,System.String,``0)">
            <summary>
            一个泛型方法，提供json对象的数据写入
            </summary>
            <typeparam name="T">写入的泛型</typeparam>
            <param name="json">json对象</param>
            <param name="property">值名称</param>
            <param name="value">值数据</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ShowExceptionMessage(System.Exception)">
            <summary>
            显示一个完整的错误信息
            </summary>
            <param name="ex">异常对象</param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ShowExceptionMessage(System.String,System.Exception)">
            <summary>
            显示一个完整的错误信息，和额外的字符串描述信息
            </summary>
            <param name="extraMsg">额外的描述信息</param>
            <param name="ex">异常对象</param>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetExceptionMessage(System.Exception)">
            <summary>
            获取一个异常的完整错误信息
            </summary>
            <param name="ex">异常对象</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.GetExceptionMessage(System.String,System.Exception)">
            <summary>
            获取一个异常的完整错误信息，和额外的字符串描述信息
            </summary>
            <param name="extraMsg">额外的信息</param>
            <param name="ex">异常对象</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToHexString(System.Byte[])">
            <summary>
            字节数据转化成16进制表示的字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToHexString(System.Byte[],System.Char)">
            <summary>
            字节数据转化成16进制表示的字符串
            </summary>
            <param name="InBytes">字节数组</param>
            <param name="segment">分割符</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToHexString(System.String)">
            <summary>
            字符串数据转化成16进制表示的字符串
            </summary>
            <param name="InString">输入的字符串数据</param>
            <returns>返回的字符串</returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.HexStringToBytes(System.String)">
            <summary>
            将16进制的字符串转化成Byte数据，将检测每2个字符转化，也就是说，中间可以是任意字符
            </summary>
            <param name="hex"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.BoolArrayToByte(System.Boolean[])">
            <summary>
            将bool数组转换到byte数组
            </summary>
            <param name="array"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToBoolArray(System.Byte[],System.Int32)">
            <summary>
            从Byte数组中提取位数组
            </summary>
            <param name="InBytes">原先的字节数组</param>
            <param name="length">想要转换的长度，如果超出自动会缩小到数组最大长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToShortArray(System.Byte[],System.Boolean)">
            <summary>
            从byte数组中提取出short数组，并指定是否需要高地位置换
            </summary>
            <param name="InBytes"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.ByteToUShortArray(System.Byte[],System.Boolean)">
            <summary>
            从byte数组中提取出ushort数组，并指定是否需要高地位置换
            </summary>
            <param name="InBytes"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftBasic.FrameworkVersion">
            <summary>
            设置或获取系统框架的版本号
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftBasic.DeepClone(System.Object)">
            <summary>
            使用序列化反序列化深度克隆一个对象
            </summary>
            <param name="oringinal"></param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftMail">
            <summary>
            软件的邮箱类，用于发送邮箱数据，连续发送10次失败则禁止发送
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.SoftMailSendFailedCount">
            <summary>
            系统连续发送失败的次数，为了不影响系统，连续三次失败就禁止发送
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMail.MailSystem163">
            <summary>
            系统提供一个默认的163邮箱发送账号，只要更改接收地址即可发送服务，可能会被拦截
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMail.MailSystemQQ">
            <summary>
            系统提供一个默认的QQ邮箱发送账号，只要更改接收地址即可发送服务，发送成功概率比较高
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.#ctor(System.Action{System.Net.Mail.SmtpClient},System.String,System.String)">
            <summary>
            实例化一个邮箱发送类，需要指定初始化信息
            </summary>
            <param name="mailIni">初始化的方法</param>
            <param name="addr_From">发送地址，应该和账户匹配</param>
            <param name="addr_to">邮件接收地址</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.smtpClient">
            <summary>
            系统的邮件发送客户端
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.MailFromAddress">
            <summary>
            发送邮件的地址
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMail.MailSendAddress">
            <summary>
            邮件发送的地址
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.Exception)">
            <summary>
            发生BUG至邮件地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="ex">异常的BUG，同样试用兼容类型</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String)">
            <summary>
            发送邮件至地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.Boolean)">
            <summary>
            发送邮件至地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="isHtml">是否是html格式化文本</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.Exception,System.String)">
            <summary>
            发生BUG至邮件地址，需要提前指定发送地址，否则失败
            </summary>
            <param name="ex">异常的BUG，同样试用兼容类型</param>
            <param name="addtion">额外信息</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.String)">
            <summary>
            发送邮件的方法，需要指定接收地址，主题及内容
            </summary>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.String,System.Boolean)">
            <summary>
            发送邮件的方法，默认发送别名，优先级，是否HTML
            </summary>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="isHtml">是否是html格式的内容</param>
            <returns>是否发送成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMail.SendMail(System.String,System.String,System.String[],System.String,System.String,System.Net.Mail.MailPriority,System.Boolean)">
            <summary>
            发送邮件的方法，需要提供完整的参数信息
            </summary>
            <param name="addr_from">发送地址</param>
            <param name="name">发送别名</param>
            <param name="addr_to">接收地址</param>
            <param name="subject">邮件主题</param>
            <param name="body">邮件内容</param>
            <param name="priority">优先级</param>
            <param name="isHtml">邮件内容是否是HTML语言</param>
            <returns>发生是否成功，内容不正确会被视为垃圾邮件</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftMsgQueue`1">
            <summary>
            一个简单通用的消息队列
            </summary>
            <typeparam name="T">类型</typeparam>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMsgQueue`1.all_items">
            <summary>
            所有临时存储的数据
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMsgQueue`1.MaxCache">
            <summary>
            临时消息存储的最大条数，必须大于10
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftMsgQueue`1.CurrentItem">
            <summary>
            获取最新添加进去的数据
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftMsgQueue`1.lock_queue">
            <summary>
            将集合进行锁定
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.AddNewItem(`0)">
            <summary>
            新增一条数据
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.ToSaveString">
            <summary>
            获取存储字符串
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftMsgQueue`1.LoadByString(System.String)">
            <summary>
            获取加载字符串
            </summary>
            <param name="content"></param>
        </member>
        <member name="T:HslCommunication.BasicFramework.MessageBoard">
            <summary>
            系统的消息类，用来发送消息，和确认消息的
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.NameSend">
            <summary>
            发送方名称
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.NameReceive">
            <summary>
            接收方名称
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.SendTime">
            <summary>
            发送时间
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.Content">
            <summary>
            发送的消息内容
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.MessageBoard.HasViewed">
            <summary>
            消息是否已经被查看
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftNumericalOrder">
            <summary>
            一个用于自动流水号生成的类，必须指定保存的文件，实时保存来确认安全
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.#ctor(System.String,System.String,System.Int32,System.String)">
            <summary>
            实例化一个流水号生成的对象
            </summary>
            <param name="textHead">流水号的头文本</param>
            <param name="timeFormate">流水号带的时间信息</param>
            <param name="numberLength">流水号数字的标准长度，不够补0</param>
            <param name="fileSavePath">流水号存储的文本位置</param>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.CurrentIndex">
            <summary>
            当前的生成序列号
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.TextHead">
            <summary>
            流水号的文本头
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.TimeFormate">
            <summary>
            时间格式默认年月日
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.SoftNumericalOrder.NumberLength">
            <summary>
            流水号数字应该显示的长度
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.ToSaveString">
            <summary>
            获取流水号的值
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.LoadByString(System.String)">
            <summary>
            加载流水号
            </summary>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.ClearNumericalOrder">
            <summary>
            清除流水号计数，进行重新计数
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.GetNumericalOrder">
            <summary>
            获取流水号数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.GetNumericalOrder(System.String)">
            <summary>
            获取流水号数据
            </summary>
            <param name="textHead">指定一个新的文本头</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftNumericalOrder.GetLongOrder">
            <summary>
            单纯的获取数字形式的流水号
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.BasicFramework.SoftNumericalOrder.AsyncCoordinator">
            <summary>
            高性能存储块
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.GraphDirection">
            <summary>
            图形的方向
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphDirection.Upward">
            <summary>
            向上
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphDirection.Downward">
            <summary>
            向下
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphDirection.Ledtward">
            <summary>
            向左
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphDirection.Rightward">
            <summary>
            向右
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.Paintdata">
            <summary>
            包含整型和字符串描述的数据类型
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.Paintdata.Count">
            <summary>
            数量
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.Paintdata.Description">
            <summary>
            描述
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.GraphicRender">
            <summary>
            图形的呈现方式
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Histogram">
            <summary>
            直方图
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Piechart">
            <summary>
            饼图
            </summary>
        </member>
        <member name="F:HslCommunication.BasicFramework.GraphicRender.Linegraph">
            <summary>
            折线图
            </summary>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftPainting">
            <summary>
            静态类，包含了几个常用的画图方法，获取字符串，绘制小三角等
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.GetGraphicFromArray(System.Int32[],System.Int32,System.Int32,System.Int32,System.Drawing.Color)">
            <summary>
            获取一个直方图
            </summary>
            <param name="array">数据数组</param>
            <param name="width">宽度</param>
            <param name="height">高度</param>
            <param name="degree">刻度划分等级</param>
            <param name="lineColor">线条颜色</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.ComputePaintLocationY(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            计算绘图时的相对偏移值
            </summary>
            <param name="max">0-100分的最大值，就是指准备绘制的最大值</param>
            <param name="min">0-100分的最小值，就是指准备绘制的最小值</param>
            <param name="height">实际绘图区域的高度</param>
            <param name="value">需要绘制数据的当前值</param>
            <returns>相对于0的位置，还需要增加上面的偏值</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.ComputePaintLocationY(System.Single,System.Single,System.Int32,System.Single)">
            <summary>
            计算绘图时的相对偏移值
            </summary>
            <param name="max">0-100分的最大值，就是指准备绘制的最大值</param>
            <param name="min">0-100分的最小值，就是指准备绘制的最小值</param>
            <param name="height">实际绘图区域的高度</param>
            <param name="value">需要绘制数据的当前值</param>
            <returns>相对于0的位置，还需要增加上面的偏值</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.PaintCoordinateDivide(System.Drawing.Graphics,System.Drawing.Pen,System.Drawing.Pen,System.Drawing.Font,System.Drawing.Brush,System.Drawing.StringFormat,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            绘制坐标系中的刻度线
            </summary>
            <param name="g"></param>
            <param name="penLine"></param>
            <param name="penDash"></param>
            <param name="font"></param>
            <param name="brush"></param>
            <param name="sf"></param>
            <param name="degree"></param>
            <param name="max"></param>
            <param name="min"></param>
            <param name="width"></param>
            <param name="height"></param>
            <param name="left"></param>
            <param name="right"></param>
            <param name="up"></param>
            <param name="down"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.PaintTriangle(System.Drawing.Graphics,System.Drawing.Brush,System.Drawing.Point,System.Int32,HslCommunication.BasicFramework.GraphDirection)">
            <summary>
            根据指定的方向绘制一个箭头
            </summary>
            <param name="g"></param>
            <param name="brush"></param>
            <param name="point"></param>
            <param name="size"></param>
            <param name="direction"></param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftPainting.GetGraphicFromArray(HslCommunication.BasicFramework.Paintdata[],System.Int32,System.Int32,HslCommunication.BasicFramework.GraphicRender)">
            <summary>
            根据数据生成一个可视化的图形
            </summary>
            <param name="array">数据集合</param>
            <param name="width">需要绘制图形的宽度</param>
            <param name="height">需要绘制图形的高度</param>
            <param name="graphic">指定绘制成什么样子的图形</param>
            <returns>返回一个bitmap对象</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftSecurity">
            <summary>
            字符串加密解密相关的自定义类
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Encrypt(System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Encrypt(System.String,System.String)">
            <summary>
            加密数据，采用对称加密的方式
            </summary>
            <param name="pToEncrypt">待加密的数据</param>
            <param name="Password">密钥，长度为8，英文或数字</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Decrypt(System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSecurity.MD5Decrypt(System.String,System.String)">
            <summary>
            解密过程，使用的是对称的加密
            </summary>
            <param name="pToDecrypt">等待解密的字符</param>
            <param name="password">密钥，长度为8，英文或数字</param>
            <returns>返回原密码，如果解密失败，返回‘解密失败’</returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.SoftSqlOperate">
            <summary>
            数据库操作的相关类，包含了常用的方法，避免大量的重复代码
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSql(System.String,System.String)">
            <summary>
            普通的执行SQL语句，并返回影响行数，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，适合插入，更新，删除</param>
            <returns>返回受影响的行数</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSql(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            普通的执行SQL语句，并返回影响行数，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，适合插入，更新，删除</param>
            <returns>返回受影响的行数</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectTable(System.String,System.String)">
            <summary>
            选择数据表的执行SQL语句，并返回最终数据表，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据表</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectTable(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            选择数据表的执行SQL语句，并返回最终数据表，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据表</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectEnumerable``1(System.String,System.String)">
            <summary>
            选择指定类型数据集合执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据集合</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectEnumerable``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            选择指定类型数据集合执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据集合</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectObject``1(System.String,System.String)">
            <summary>
            更新指定类型数据执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectObject``1(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            更新指定类型数据执行SQL语句，并返回指定类型的数据集合，该方法应该放到try-catch代码块中
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns>结果数据</returns>
            <exception cref="T:System.Data.SqlClient.SqlException"></exception>
            <exception cref="T:System.InvalidOperationException"></exception>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectCount(System.String,System.String)">
            <summary>
            用于选择聚合函数值的方法，例如Count，Average，Max，Min，Sum等最终只有一个结果值的对象
            </summary>
            <param name="conStr">数据库的连接字符串</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SoftSqlOperate.ExecuteSelectCount(System.Data.SqlClient.SqlConnection,System.String)">
            <summary>
            用于选择聚合函数值的方法，例如Count，Average，Max，Min，Sum等最终只有一个结果值的对象
            </summary>
            <param name="conn">数据库的连接对象</param>
            <param name="cmdStr">sql语句，选择数据表的语句</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.ISqlDataType">
            <summary>
            数据库对应类的读取接口
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.ISqlDataType.LoadBySqlDataReader(System.Data.SqlClient.SqlDataReader)">
            <summary>
            根据sdr对象初始化数据的方法
            </summary>
            <param name="sdr"></param>
        </member>
        <member name="T:HslCommunication.BasicFramework.SystemVersion">
            <summary>
            系统版本类，由三部分组成，包含了一个大版本，小版本，修订版，还有一个开发者维护的内部版
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.String)">
            <summary>
            根据格式化字符串的版本号初始化
            </summary>
            <param name="VersionString">格式化的字符串，例如：1.0或1.0.0或1.0.0.0503</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.Int32,System.Int32,System.Int32)">
            <summary>
            根据指定的数字实例化一个对象
            </summary>
            <param name="main">主版本</param>
            <param name="sec">次版本</param>
            <param name="edit">修订版</param>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.#ctor(System.Int32,System.Int32,System.Int32,System.Int32)">
            <summary>
            根据指定的数字实例化一个对象
            </summary>
            <param name="main">主版本</param>
            <param name="sec">次版本</param>
            <param name="edit">修订版</param>
            <param name="inner">内部版本号</param>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.MainVersion">
            <summary>
            主版本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.SecondaryVersion">
            <summary>
            次版本
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.EditVersion">
            <summary>
            修订版
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.SystemVersion.InnerVersion">
            <summary>
            内部版本号，或者是版本号表示为年月份+内部版本的表示方式
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.ToString(System.String)">
            <summary>
            根据格式化为支持返回的不同信息的版本号
            C返回1.0.0.0
            N返回1.0.0
            S返回1.0
            </summary>
            <param name="format">格式化信息</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.ToString">
            <summary>
            获取版本号的字符串形式，如果内部版本号为0，则显示时不携带
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_Equality(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断是否相等
            </summary>
            <param name="SV1">第一个版本</param>
            <param name="SV2">第二个版本</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_Inequality(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断是否不相等
            </summary>
            <param name="SV1">第一个版本号</param>
            <param name="SV2">第二个版本号</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_GreaterThan(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断一个版本是否大于另一个版本
            </summary>
            <param name="SV1">第一个版本</param>
            <param name="SV2">第二个版本</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.op_LessThan(HslCommunication.BasicFramework.SystemVersion,HslCommunication.BasicFramework.SystemVersion)">
            <summary>
            判断第一个版本是否小于第二个版本
            </summary>
            <param name="SV1"></param>
            <param name="SV2"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.Equals(System.Object)">
            <summary>
            判断两个实例是否相等
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.BasicFramework.SystemVersion.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.BasicFramework.VersionInfo">
            <summary>
            版本信息类，用于展示版本发布信息
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.ReleaseDate">
            <summary>
            版本的发行日期
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.UpdateDetails">
            <summary>
            版本的更新细节
            </summary>
        </member>
        <member name="P:HslCommunication.BasicFramework.VersionInfo.VersionNum">
            <summary>
            版本号
            </summary>
        </member>
        <member name="M:HslCommunication.BasicFramework.VersionInfo.ToString">
            <summary>
            获取版本号
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Controls.UserCurve">
            <summary>
            曲线控件对象
            </summary>
            <remarks>
            详细参照如下的博客:
            </remarks>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.#ctor">
            <summary>
            实例化一个曲线显示的控件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueMaxLeft">
            <summary>
            获取或设置图形的纵坐标的最大值，该值必须大于最小值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueMinLeft">
            <summary>
            获取或设置图形的纵坐标的最小值，该值必须小于最大值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueMaxRight">
            <summary>
            获取或设置图形的纵坐标的最大值，该值必须大于最小值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueMinRight">
            <summary>
            获取或设置图形的纵坐标的最小值，该值必须小于最大值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ValueSegment">
            <summary>
            获取或设置图形的纵轴分段数
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.IsAbscissaStrech">
            <summary>
            获取或设置所有的数据是否强制在一个界面里显示
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.StrechDataCountMax">
            <summary>
            获取或设置拉伸模式下的最大数据量
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.IsRenderDashLine">
            <summary>
            获取或设置虚线是否进行显示
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ColorLinesAndText">
            <summary>
            获取或设置坐标轴及相关信息文本的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.ColorDashLines">
            <summary>
            获取或设置虚线的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.IntervalAbscissaText">
            <summary>
            获取或设置纵向虚线的分隔情况，单位为多少个数据
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserCurve.TextAddFormat">
            <summary>
            获取或设置实时数据新增时文本相对应于时间的格式化字符串，默认HH:mm
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetCurveText(System.String[])">
            <summary>
            设置曲线的横坐标文本，适用于显示一些固定的曲线信息
            </summary>
            <param name="descriptions">应该和曲线的点数一致</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetLeftCurve(System.String,System.Single[])">
            <summary>
            新增或修改一条指定关键字的左参考系曲线数据，需要指定数据，颜色随机，没有数据上限，线条宽度为1
            </summary>
            <param name="key">曲线关键字</param>
            <param name="data">曲线的具体数据</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetLeftCurve(System.String,System.Single[],System.Drawing.Color)">
            <summary>
            新增或修改一条指定关键字的左参考系曲线数据，需要指定数据，颜色，没有数据上限，线条宽度为1
            </summary>
            <param name="key">曲线关键字</param>
            <param name="data"></param>
            <param name="lineColor"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetRightCurve(System.String,System.Single[])">
            <summary>
            新增或修改一条指定关键字的右参考系曲线数据，需要指定数据，颜色随机，没有数据上限，线条宽度为1
            </summary>
            <param name="key">曲线关键字</param>
            <param name="data"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetRightCurve(System.String,System.Single[],System.Drawing.Color)">
            <summary>
            新增或修改一条指定关键字的右参考系曲线数据，需要指定数据，颜色，没有数据上限，线条宽度为1
            </summary>
            <param name="key">曲线关键字</param>
            <param name="data"></param>
            <param name="lineColor"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.SetCurve(System.String,System.Boolean,System.Single[],System.Drawing.Color,System.Single)">
            <summary>
            新增或修改一条指定关键字的曲线数据，需要指定参考系及数据，颜色，线条宽度
            </summary>
            <param name="key">曲线关键字</param>
            <param name="isLeft">是否以左侧坐标轴为参照系</param>
            <param name="data">数据</param>
            <param name="lineColor">线条颜色</param>
            <param name="thickness">线条宽度</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.RemoveCurve(System.String)">
            <summary>
            移除指定关键字的曲线
            </summary>
            <param name="key">曲线关键字</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.RemoveAllCurve">
            <summary>
            移除指定关键字的曲线
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddCurveData(System.String,System.Single[],System.Boolean)">
            <summary>
            新增指定关键字曲线的一个数据，注意该关键字的曲线必须存在，否则无效
            </summary>
            <param name="key">新增曲线的关键字</param>
            <param name="values"></param>
            <param name="isUpdateUI">是否刷新界面</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddCurveData(System.String,System.Single)">
            <summary>
            新增指定关键字曲线的一个数据，注意该关键字的曲线必须存在，否则无效
            </summary>
            <param name="key">曲线的关键字</param>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddCurveData(System.String,System.Single[])">
            <summary>
            新增指定关键字曲线的一组数据，注意该关键字的曲线必须存在，否则无效
            </summary>
            <param name="key">曲线的关键字</param>
            <param name="values">数组值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddCurveData(System.String[],System.Single[])">
            <summary>
            新增指定关键字数组曲线的一组数据，注意该关键字的曲线必须存在，否则无效，一个数据对应一个数组
            </summary>
            <param name="keys">曲线的关键字数组</param>
            <param name="values">数组值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddLeftAuxiliary(System.Single)">
            <summary>
            新增一条左侧的辅助线，使用默认的文本颜色
            </summary>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddLeftAuxiliary(System.Single,System.Drawing.Color)">
            <summary>
            新增一条左侧的辅助线，使用指定的颜色
            </summary>
            <param name="value">数据值</param>
            <param name="lineColor">线条颜色</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddLeftAuxiliary(System.Single,System.Drawing.Color,System.Single)">
            <summary>
            新增一条左侧的辅助线
            </summary>
            <param name="value">数据值</param>
            <param name="lineColor">线条颜色</param>
            <param name="lineThickness">线条宽度</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddRightAuxiliary(System.Single)">
            <summary>
            新增一条右侧的辅助线，使用默认的文本颜色
            </summary>
            <param name="value">数据值</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddRightAuxiliary(System.Single,System.Drawing.Color)">
            <summary>
            新增一条右侧的辅助线，使用指定的颜色
            </summary>
            <param name="value">数据值</param>
            <param name="lineColor">线条颜色</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.AddRightAuxiliary(System.Single,System.Drawing.Color,System.Single)">
            <summary>
            新增一条右侧的辅助线
            </summary>
            <param name="value">数据值</param>
            <param name="lineColor">线条颜色</param>
            <param name="lineThickness">线条宽度</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.RemoveAuxiliary(System.Single)">
            <summary>
            移除所有的指定值的辅助曲线，包括左边的和右边的
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.RemoveAllAuxiliary">
            <summary>
            移除所有的辅助线
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserCurve.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserCurve.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.HslCurveItem">
            <summary>
            曲线数据对象
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.HslCurveItem.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.HslCurveItem.Data">
            <summary>
            数据
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.HslCurveItem.LineThickness">
            <summary>
            线条的宽度
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.HslCurveItem.LineColor">
            <summary>
            曲线颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.HslCurveItem.IsLeftFrame">
            <summary>
            是否左侧参考系，True为左侧，False为右侧
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.AuxiliaryLine">
            <summary>
            辅助线对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.Value">
            <summary>
            实际的数据值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.PaintValue">
            <summary>
            实际的数据绘制
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.LineColor">
            <summary>
            辅助线的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.PenDash">
            <summary>
            辅助线的画笔资源
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.LineThickness">
            <summary>
            辅助线的宽度
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.LineTextBrush">
            <summary>
            辅助线文本的画刷
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.AuxiliaryLine.IsLeftFrame">
            <summary>
            是否左侧参考系，True为左侧，False为右侧
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.AuxiliaryLine.Dispose">
            <summary>
            释放内存信息
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserGaugeChart">
            <summary>
            仪表盘控件类
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserGaugeChart.#ctor">
            <summary>
            实例化一个仪表盘控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserGaugeChart.GetCenterPoint">
            <summary>
            
            </summary>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.GaugeBorder">
            <summary>
            获取或设置仪表盘的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.PointerColor">
            <summary>
            获取或设置指针的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.ValueStart">
            <summary>
            获取或设置数值的起始值，默认为0
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.ValueMax">
            <summary>
            获取或设置数值的最大值，默认为100
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.Value">
            <summary>
            获取或设置数值的当前值，应该处于最小值和最大值之间
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.ValueAlarmMax">
            <summary>
            获取或设置数值的上限报警值，设置为超过最大值则无上限报警
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.ValueAlarmMin">
            <summary>
            获取或设置数值的下限报警值，设置为超过最大值则无上限报警
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.SegmentCount">
            <summary>
            获取或设置仪表盘的分割段数，最小为2，最大1000
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserGaugeChart.UnitText">
            <summary>
            获取或设置仪表盘的单位描述文本
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserGaugeChart.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserGaugeChart.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserGaugeChart.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserLantern">
            <summary>
            信号灯的控件类
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserLantern.#ctor">
            <summary>
            实例化一个信号灯控件的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserLantern.LanternBackground">
            <summary>
            获取或设置开关按钮的背景色
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserLantern.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserLantern.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserLantern.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserPieChart">
            <summary>
            一个饼图的控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.#ctor">
            <summary>
            实例化一个饼图的控件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserPieChart.IsRenderPercent">
            <summary>
            是否显示百分比信息
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserPieChart.IsRenderSmall">
            <summary>
            是否在图形上显示占比非常小的文本信息
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.GetRandomColor">
            <summary>
            随机生成颜色，该颜色相对于白色为深色颜色
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.SetDataSource(HslCommunication.Core.HslPieItem[])">
            <summary>
            设置显示的数据源
            </summary>
            <param name="source">特殊的显示对象</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.SetDataSource(System.String[],System.Int32[])">
            <summary>
            根据名称和值进行数据源的显示，两者的长度需要一致
            </summary>
            <param name="names">名称</param>
            <param name="values">值</param>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="F:HslCommunication.Controls.UserPieChart.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserPieChart.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserSwitch">
            <summary>
            一个开关按钮类
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserSwitch.#ctor">
            <summary>
            实例化一个开关按钮对象
            </summary>
        </member>
        <member name="E:HslCommunication.Controls.UserSwitch.OnSwitchChanged">
            <summary>
            开关按钮发生变化的事件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserSwitch.SwitchBackground">
            <summary>
            获取或设置开关按钮的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserSwitch.SwitchForeground">
            <summary>
            获取或设置开关按钮的前景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserSwitch.SwitchStatus">
            <summary>
            获取或设置开关按钮的开合状态
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserSwitch.SwitchStatusDescription">
            <summary>
            获取或设置两种开关状态的文本描述，例如：new string[]{"Off","On"}
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserSwitch.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserSwitch.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserSwitch.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserVerticalProgress">
            <summary>
            一个直立的进度条控件，满足不同的情况使用
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserVerticalProgress.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.Cursor">
            <summary>
            获取或设置光标在控件上显示的信息
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.BackColor">
            <summary>
            获取或设置控件的背景颜色值
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.ProgressColor">
            <summary>
            获取或设置进度的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.Max">
            <summary>
            进度条的最大值，默认为100
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.Value">
            <summary>
            当前进度条的值，不能大于最大值或小于0
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.IsTextRender">
            <summary>
            是否显示进度
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.BorderColor">
            <summary>
            设置进度条的边框颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.ValueChangeSpeed">
            <summary>
            设置进度变更的速度
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.UseAnimation">
            <summary>
            获取或设置进度条变化的时候是否采用动画效果
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserVerticalProgress.ProgressStyle">
            <summary>
            进度条的样式
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.UserVerticalProgress.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserVerticalProgress.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserVerticalProgress.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.ProgressStyle">
            <summary>
            进度条的样式
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.ProgressStyle.Vertical">
            <summary>
            竖直的，纵向的进度条
            </summary>
        </member>
        <member name="F:HslCommunication.Controls.ProgressStyle.Horizontal">
            <summary>
            水平进度条
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserButton">
            <summary>
            一个自定义的按钮控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.#ctor">
            <summary>
            实例化一个按钮对象
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.UIText">
            <summary>
            设置或获取显示的文本
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.TextColor">
            <summary>
            设置或获取显示文本的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.CornerRadius">
            <summary>
            设置按钮的圆角
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.Selected">
            <summary>
            用来设置按钮的选中状态
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.ForeColor">
            <summary>
            已经弃用
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.Text">
            <summary>
            已经弃用
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.OriginalColor">
            <summary>
            按钮的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.EnableColor">
            <summary>
            按钮的背景色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.ActiveColor">
            <summary>
            鼠标挪动时的活动颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.BorderVisiable">
            <summary>
            设置按钮的边框是否可见
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserButton.CustomerInformation">
            <summary>
            存放用户需要保存的一些额外的信息
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.PerformClick">
            <summary>
            触发一次点击的事件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘数据区
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.OnClick(System.EventArgs)">
            <summary>
            点击按钮的触发事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.OnMouseClick(System.Windows.Forms.MouseEventArgs)">
            <summary>
            点击的时候触发事件
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:HslCommunication.Controls.UserButton.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserButton.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.Controls.UserClock">
            <summary>
            一个时钟控件
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.#ctor">
            <summary>
            实例化一个时钟控件
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.当前时间">
            <summary>
            获取时钟的当前时间
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.时钟指针颜色">
            <summary>
            获取或设置时钟指针的颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.分钟指针颜色">
            <summary>
            获取或设置时钟分钟指针颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.秒钟指针颜色">
            <summary>
            获取或设置秒钟指针颜色
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.显示文本">
            <summary>
            获取或设置时钟的个性化文本
            </summary>
        </member>
        <member name="P:HslCommunication.Controls.UserClock.显示文本字体">
            <summary>
            字体
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.OnPaint(System.Windows.Forms.PaintEventArgs)">
            <summary>
            重绘控件显示
            </summary>
            <param name="e"></param>
        </member>
        <member name="F:HslCommunication.Controls.UserClock.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.Controls.UserClock.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.NetHandle">
            <summary>
            用于网络传递的信息头，使用上等同于int
            </summary>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Implicit(System.Int32)~HslCommunication.NetHandle">
            <summary>
            赋值操作，可以直接赋值int数据
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Implicit(HslCommunication.NetHandle)~System.Int32">
            <summary>
            也可以赋值给int数据
            </summary>
            <param name="netHandle"></param>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Equality(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            判断是否相等
            </summary>
            <param name="netHandle1">第一个数</param>
            <param name="netHandle2">第二个数</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Inequality(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            判断是否不相等
            </summary>
            <param name="netHandle1"></param>
            <param name="netHandle2"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Addition(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            两个数值相加
            </summary>
            <param name="netHandle1"></param>
            <param name="netHandle2"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_Subtraction(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            两个数值相减
            </summary>
            <param name="netHandle1"></param>
            <param name="netHandle2"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_LessThan(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            判断是否小于另一个数值
            </summary>
            <param name="netHandle1"></param>
            <param name="netHandle2"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.op_GreaterThan(HslCommunication.NetHandle,HslCommunication.NetHandle)">
            <summary>
            判断是否大于另一个数值
            </summary>
            <param name="netHandle1"></param>
            <param name="netHandle2"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.#ctor(System.Int32)">
            <summary>
            初始化一个暗号对象
            </summary>
        </member>
        <member name="M:HslCommunication.NetHandle.#ctor(System.Byte,System.Byte,System.UInt16)">
            <summary>
            根据三个值来初始化暗号对象
            </summary>
            <param name="major">主暗号</param>
            <param name="minor">次暗号</param>
            <param name="identifier">暗号编号</param>
        </member>
        <member name="F:HslCommunication.NetHandle.m_CodeValue">
            <summary>
            完整的暗号值
            </summary>
        </member>
        <member name="F:HslCommunication.NetHandle.m_CodeMajor">
            <summary>
            主暗号分类0-255
            </summary>
        </member>
        <member name="F:HslCommunication.NetHandle.m_CodeMinor">
            <summary>
            次要的暗号分类0-255
            </summary>
        </member>
        <member name="F:HslCommunication.NetHandle.m_CodeIdentifier">
            <summary>
            暗号的编号分类0-65535
            </summary>
        </member>
        <member name="P:HslCommunication.NetHandle.CodeValue">
            <summary>
            完整的暗号值
            </summary>
        </member>
        <member name="P:HslCommunication.NetHandle.CodeMajor">
            <summary>
            主暗号分类0-255
            </summary>
        </member>
        <member name="P:HslCommunication.NetHandle.CodeMinor">
            <summary>
            次要的暗号分类0-255
            </summary>
        </member>
        <member name="P:HslCommunication.NetHandle.CodeIdentifier">
            <summary>
            暗号的编号分类0-65535
            </summary>
        </member>
        <member name="M:HslCommunication.NetHandle.ToString">
            <summary>
            获取完整的暗号数据
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.Equals(System.Object)">
            <summary>
            判断两个实例是否相同
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.NetHandle.GetHashCode">
            <summary>
            获取哈希值
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.HslCommunicationCode">
            <summary>
            用于本程序集访问通信的暗号说明
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.HeadByteLength">
            <summary>
            规定所有的网络传输指令头都为32字节
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_Check_Secends">
            <summary>
            用于心跳程序的暗号信息
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_Client_Quit">
            <summary>
            客户端退出消息
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_Client_Refuse_Login">
            <summary>
            因为客户端达到上限而拒绝登录
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_Client_Allow_Login">
            <summary>
            允许客户端登录到服务器
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_User_String">
            <summary>
            说明发送的只是文本信息
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_User_Bytes">
            <summary>
            发送的数据就是普通的字节数组
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_User_Bitmap">
            <summary>
            发送的数据就是普通的图片数据
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_User_Exception">
            <summary>
            发送的数据是一条异常的数据，字符串为异常消息
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_File_Download">
            <summary>
            请求文件下载的暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_File_Upload">
            <summary>
            请求文件上传的暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_File_Delete">
            <summary>
            请求删除文件的暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_File_Check_Right">
            <summary>
            文件校验成功
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_File_Check_Error">
            <summary>
            文件校验失败
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_File_Save_Error">
            <summary>
            文件保存失败
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_File_Directory_Files">
            <summary>
            请求文件列表的暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_File_Directories">
            <summary>
            请求子文件的列表暗号
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_NoZipped">
            <summary>
            不压缩数据字节
            </summary>
        </member>
        <member name="F:HslCommunication.HslCommunicationCode.Hsl_Protocol_Zipped">
            <summary>
            压缩数据字节
            </summary>
        </member>
        <member name="T:HslCommunication.Core.CoordinationStatus">
            <summary>
            线程的协调逻辑状态
            </summary>
        </member>
        <member name="F:HslCommunication.Core.CoordinationStatus.AllDone">
            <summary>
            所有项完成
            </summary>
        </member>
        <member name="F:HslCommunication.Core.CoordinationStatus.Timeout">
            <summary>
            超时
            </summary>
        </member>
        <member name="F:HslCommunication.Core.CoordinationStatus.Cancel">
            <summary>
            任务取消
            </summary>
        </member>
        <member name="T:HslCommunication.Core.AsyncCoordinator">
            <summary>
            一个线程协调逻辑类，详细参考书籍《CLR Via C#》page:681
            这个类可惜没有报告进度的功能
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.AboutToBegin(System.Int32)">
            <summary>
            每次的操作任务开始前必须调用该方法
            </summary>
            <param name="opsToAdd"></param>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.JustEnded">
            <summary>
            在一次任务处理好操作之后，必须调用该方法
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.AllBegun(System.Action{HslCommunication.Core.CoordinationStatus},System.Int32)">
            <summary>
            该方法必须在发起所有的操作之后调用
            </summary>
            <param name="callback">回调方法</param>
            <param name="timeout">超时时间</param>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.TimeExpired(System.Object)">
            <summary>
            超时的方法
            </summary>
            <param name="o"></param>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.Cancel">
            <summary>
            取消任务的执行
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.ReportStatus(HslCommunication.Core.CoordinationStatus)">
            <summary>
            生成一次报告
            </summary>
            <param name="status">报告的状态</param>
        </member>
        <member name="M:HslCommunication.Core.AsyncCoordinator.Maxinum(System.Int32@,System.Func{System.Int32,System.Int32})">
            <summary>
            乐观的并发方法模型，具体参照《CLR Via C#》page:686
            </summary>
            <param name="target">唯一的目标数据</param>
            <param name="change">修改数据的算法</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.HslAsyncCoordinator">
            <summary>
            一个用于高性能，乐观并发模型控制操作的类，允许一个方法(隔离方法)的安全单次执行
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslAsyncCoordinator.#ctor(System.Action)">
            <summary>
            实例化一个对象，需要传入隔离执行的方法
            </summary>
            <param name="operater">隔离执行的方法</param>
        </member>
        <member name="F:HslCommunication.Core.HslAsyncCoordinator.OperaterStatus">
            <summary>
            操作状态，0是未操作，1是操作中
            </summary>
        </member>
        <member name="F:HslCommunication.Core.HslAsyncCoordinator.Target">
            <summary>
            需要操作的次数
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslAsyncCoordinator.StartOperaterInfomation">
            <summary>
            启动线程池执行隔离方法
            </summary>
        </member>
        <member name="T:HslCommunication.Core.HslReadWriteLock">
            <summary>
            一个高性能的读写锁，支持写锁定，读灵活，读时写锁定，写时读锁定
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.ToString">
            <summary>
            返回本对象的描述字符串
            </summary>
            <returns>对象的描述字符串</returns>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.#ctor">
            <summary>
            实例化一个读写锁的对象
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.Enter(System.Boolean)">
            <summary>
            根据读写情况请求锁
            </summary>
            <param name="exclusive">True为写请求，False为读请求</param>
        </member>
        <member name="M:HslCommunication.Core.HslReadWriteLock.Leave">
            <summary>
            释放锁，将根据锁状态自动区分读写锁
            </summary>
        </member>
        <member name="T:HslCommunication.Core.SimpleHybirdLock">
            <summary>
            一个简单的混合线程同步锁，采用了基元用户加基元内核同步构造实现
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SimpleHybirdLock.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SimpleHybirdLock.m_waiters">
            <summary>
            基元用户模式构造同步锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SimpleHybirdLock.m_waiterLock">
            <summary>
            基元内核模式构造同步锁
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SimpleHybirdLock.Enter">
            <summary>
            获取锁
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SimpleHybirdLock.Leave">
            <summary>
            离开锁
            </summary>
        </member>
        <member name="T:HslCommunication.Core.SoftMultiTask`1">
            <summary>
            一个用于多线程并发处理数据的模型类，适用于处理数据量非常庞大的情况
            </summary>
            <typeparam name="T">等待处理的数据类型</typeparam>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.#ctor(`0[],System.Func{`0,System.Boolean},System.Int32)">
            <summary>
            实例化一个数据处理对象
            </summary>
            <param name="dataList">数据处理列表</param>
            <param name="operater">数据操作方法，应该是相对耗时的任务</param>
            <param name="threadCount">需要使用的线程数</param>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_opCount">
            <summary>
            操作总数，判定操作是否完成
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_opThreadCount">
            <summary>
            判断是否所有的线程是否处理完成
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_threadCount">
            <summary>
            准备启动的处理数据的线程数量
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_runStatus">
            <summary>
            指示多线程处理是否在运行中，防止冗余调用
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_dataList">
            <summary>
            列表数据
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_operater">
            <summary>
            需要操作的方法
            </summary>
        </member>
        <member name="T:HslCommunication.Core.SoftMultiTask`1.MultiInfo">
            <summary>
            一个双参数委托
            </summary>
            <param name="item"></param>
            <param name="ex"></param>
        </member>
        <member name="T:HslCommunication.Core.SoftMultiTask`1.MultiInfoTwo">
            <summary>
            用于报告进度的委托，当finish等于count时，任务完成
            </summary>
            <param name="finish">已完成操作数量</param>
            <param name="count">总数量</param>
            <param name="success">成功数量</param>
            <param name="failed">失败数量</param>
        </member>
        <member name="E:HslCommunication.Core.SoftMultiTask`1.OnExceptionOccur">
            <summary>
            异常发生时事件
            </summary>
        </member>
        <member name="E:HslCommunication.Core.SoftMultiTask`1.OnReportProgress">
            <summary>
            报告处理进度时发生
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_finishCount">
            <summary>
            已处理完成数量，无论是否异常
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_successCount">
            <summary>
            处理完成并实现操作数量
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_failedCount">
            <summary>
            处理过程中异常数量
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.HybirdLock">
            <summary>
            用于触发事件的混合线程锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_isRunningStop">
            <summary>
            指示处理状态是否为暂停状态
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_isQuit">
            <summary>
            指示系统是否需要强制退出
            </summary>
        </member>
        <member name="F:HslCommunication.Core.SoftMultiTask`1.m_isQuitAfterException">
            <summary>
            在发生错误的时候是否强制退出后续的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.StartOperater">
            <summary>
            启动多线程进行数据处理
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.StopOperater">
            <summary>
            暂停当前的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.ResumeOperater">
            <summary>
            恢复暂停的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.SoftMultiTask`1.EndedOperater">
            <summary>
            直接手动强制结束操作
            </summary>
        </member>
        <member name="P:HslCommunication.Core.SoftMultiTask`1.IsQuitAfterException">
            <summary>
            在发生错误的时候是否强制退出后续的操作
            </summary>
        </member>
        <member name="T:HslCommunication.Core.Singleton">
            <summary>
            一个双检锁的示例，适合一些占内存的静态数据对象，获取的时候才实例化真正的对象
            </summary>
        </member>
        <member name="T:HslCommunication.Core.AdvancedHybirdLock">
            <summary>
            一个高级的混合线程同步锁，采用了基元用户加基元内核同步构造实现，并包含了自旋和线程所有权
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AdvancedHybirdLock.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="F:HslCommunication.Core.AdvancedHybirdLock.m_waiters">
            <summary>
            基元用户模式构造同步锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.AdvancedHybirdLock.m_waiterLock">
            <summary>
            基元内核模式构造同步锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.AdvancedHybirdLock.m_spincount">
            <summary>
            控制自旋的一个字段
            </summary>
        </member>
        <member name="F:HslCommunication.Core.AdvancedHybirdLock.m_owningThreadId">
            <summary>
            指出哪个线程拥有锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.AdvancedHybirdLock.m_recursion">
            <summary>
            指示锁拥有了多少次
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AdvancedHybirdLock.Enter">
            <summary>
            获取锁
            </summary>
        </member>
        <member name="M:HslCommunication.Core.AdvancedHybirdLock.Leave">
            <summary>
            离开锁
            </summary>
        </member>
        <member name="T:HslCommunication.Core.HslPieItem">
            <summary>
            饼图的基本元素
            </summary>
        </member>
        <member name="M:HslCommunication.Core.HslPieItem.#ctor">
            <summary>
            实例化一个饼图基本元素的对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.HslPieItem.Name">
            <summary>
            名称
            </summary>
        </member>
        <member name="P:HslCommunication.Core.HslPieItem.Value">
            <summary>
            值
            </summary>
        </member>
        <member name="P:HslCommunication.Core.HslPieItem.Back">
            <summary>
            背景颜色
            </summary>
        </member>
        <member name="T:HslCommunication.Core.NetSupport">
            <summary>
            静态的方法支持类，提供一些网络的静态支持
            </summary>
        </member>
        <member name="F:HslCommunication.Core.NetSupport.SocketBufferSize">
            <summary>
            Socket传输中的缓冲池大小
            </summary>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.ThreadPoolCheckConnect(HslCommunication.HslTimeOut,System.Int32)">
            <summary>
            检查是否超时的静态方法
            </summary>
            <param name="timeout">数据封送对象</param>
            <param name="millisecond">超时的时间</param>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.CheckTokenEquel(System.Byte[],System.Guid)">
            <summary>
            判断两个数据的令牌是否相等
            </summary>
            <param name="head">头指令</param>
            <param name="token">令牌</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.IsTwoBytesEquel(System.Byte[],System.Int32,System.Byte[],System.Int32,System.Int32)">
            <summary>
            判断两个字节的指定部分是否相同
            </summary>
            <param name="b1">第一个字节</param>
            <param name="start1">第一个字节的起始位置</param>
            <param name="b2">第二个字节</param>
            <param name="start2">第二个字节的起始位置</param>
            <param name="length">校验的长度</param>
            <returns>返回是否相等</returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.ReadBytesFromSocket(System.Net.Sockets.Socket,System.Int32)">
            <summary>
            读取socket数据的基础方法，只适合用来接收指令头，或是同步数据
            </summary>
            <param name="socket">通信对象</param>
            <param name="receive">接收的长度</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.ReadBytesFromSocket(System.Net.Sockets.Socket,System.Int32,System.Action{System.Int64,System.Int64},System.Boolean,System.Boolean)">
            <summary>
            读取socket数据的基础方法，只适合用来接收指令头，或是同步数据
            </summary>
            <param name="socket">通信对象</param>
            <param name="receive">接收的长度</param>
            <param name="report">用于报告接收进度的对象</param>
            <param name="reportByPercent">是否按照百分比报告进度</param>
            <param name="response">是否回发接收数据长度</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.WriteStreamFromSocket(System.Net.Sockets.Socket,System.IO.Stream,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            从socket套接字读取数据并写入流中，必然报告进度
            </summary>
            <param name="socket">通信对象</param>
            <param name="stream">stream</param>
            <param name="receive">接收的长度</param>
            <param name="report">用于报告接收进度的对象</param>
            <param name="reportByPercent">是否按照百分比报告进度</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
            <exception cref="T:System.Security.SecurityException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.WriteSocketFromStream(System.Net.Sockets.Socket,System.IO.Stream,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            读取流并将数据写入socket
            </summary>
            <param name="stream">文件流</param>
            <param name="socket">连接的套接字</param>
            <param name="length">返回的文件长度</param>
            <param name="report">发送的进度报告</param>
            <param name="reportByPercent"></param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.IO.IOException"></exception>
            <exception cref="T:System.NotSupportedException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.CheckSendBytesReceived(System.Net.Sockets.Socket,System.Int64,System.Action{System.Int64,System.Int64},System.Boolean)">
            <summary>
            检查数据是否接收完成并报告进度
            </summary>
            <param name="socket">套接字</param>
            <param name="length">对方需要接收的长度</param>
            <param name="report">报告的委托方法</param>
            <param name="reportByPercent">是否按照百分比报告进度</param>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.CommandBytes(System.Int32,System.Int32,System.Guid,System.Byte[])">
            <summary>
            生成终极传送指令的方法，所有的数据均通过该方法出来
            </summary>
            <param name="command">命令头</param>
            <param name="customer">自用自定义</param>
            <param name="token">令牌</param>
            <param name="data">字节数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.CommandAnalysis(System.Byte[],System.Byte[])">
            <summary>
            解析接收到数据，先解压缩后进行解密
            </summary>
            <param name="head"></param>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.CommandBytes(System.Int32,System.Guid,System.Byte[])">
            <summary>
            获取发送字节数据的实际数据，带指令头
            </summary>
            <param name="customer"></param>
            <param name="token"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.CommandBytes(System.Int32,System.Guid,System.String)">
            <summary>
            获取发送字节数据的实际数据，带指令头
            </summary>
            <param name="customer"></param>
            <param name="token"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetSupport.GetBytesFromString(System.Int32,System.String)">
            <summary>
            根据字符串及指令头返回数据信息
            </summary>
            <param name="code"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.NetBase">
            <summary>
            一个网络通信类的基础类
            </summary>
        </member>
        <member name="P:HslCommunication.Core.NetBase.WorkSocket">
            <summary>
            用于通信工作的核心对象
            </summary>
        </member>
        <member name="P:HslCommunication.Core.NetBase.SegmentationLength">
            <summary>
            分次接收的数据长度
            </summary>
        </member>
        <member name="M:HslCommunication.Core.NetBase.ThreadPoolCheckConnect(System.Object)">
            <summary>
            检查超时的子线程
            </summary>
            <param name="obj"></param>
        </member>
        <member name="P:HslCommunication.Core.NetBase.LogHeaderText">
            <summary>
            在日志保存时的标记当前调用类的信息
            </summary>
        </member>
        <member name="P:HslCommunication.Core.NetBase.ConnectTimeout">
            <summary>
            网络访问中的超时时间，单位：毫秒，默认值5000
            </summary>
        </member>
        <member name="P:HslCommunication.Core.NetBase.KeyToken">
            <summary>
            当前对象的身份令牌，用来在网络通信中双向认证的依据
            </summary>
        </member>
        <member name="T:HslCommunication.Core.NetBase.IEDelegate">
            <summary>
            不带参数的委托
            </summary>
        </member>
        <member name="T:HslCommunication.Core.NetBase.IEDelegate`1">
            <summary>
            带一个参数的委托
            </summary>
            <typeparam name="T1">T1</typeparam>
            <param name="object1"></param>
        </member>
        <member name="T:HslCommunication.Core.NetBase.IEDelegate`2">
            <summary>
            带二个参数的委托
            </summary>
            <typeparam name="T1">T1</typeparam>
            <typeparam name="T2">T2</typeparam>
            <param name="object1">object1</param>
            <param name="object2">object2</param>
        </member>
        <member name="T:HslCommunication.Core.NetBase.IEDelegate`3">
            <summary>
            带三个参数的委托
            </summary>
            <typeparam name="T1">T1</typeparam>
            <typeparam name="T2">T2</typeparam>
            <typeparam name="T3">T3</typeparam>
            <param name="object1">object1</param>
            <param name="object2">object2</param>
            <param name="object3">object3</param>
        </member>
        <member name="P:HslCommunication.Core.NetBase.LogNet">
            <summary>
            日志保存类，默认为空
            </summary>
        </member>
        <member name="M:HslCommunication.Core.NetBase.CreateSocketAndConnect(System.Net.Sockets.Socket@,System.Net.IPEndPoint,HslCommunication.OperateResult)">
            <summary>
            创建socket对象并尝试连接终结点，如果异常，则结束通信
            </summary>
            <param name="socket">网络套接字</param>
            <param name="iPEndPoint">网络终结点</param>
            <param name="result">结果对象</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HslCommunication.Core.NetBase.ReceiveBytesFromSocket(System.Net.Sockets.Socket,System.Byte[]@,System.Int32,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.Boolean,System.Boolean,System.Boolean,System.String)">
            <summary>
            仅仅接收一定长度的字节数据，如果异常，则结束通信
            </summary>
            <param name="socket">套接字</param>
            <param name="bytes">字节数据</param>
            <param name="length">长度</param>
            <param name="result">结果对象</param>
            <param name="receiveStatus">接收状态</param>
            <param name="reportByPercent">是否根据百分比报告进度</param>
            <param name="response">是否回发进度</param>
            <param name="checkTimeOut">是否进行超时检查</param>
            <param name="exceptionMessage">假设发生异常，应该携带什么信息</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetBase.SendBytesToSocket(System.Net.Sockets.Socket,System.Byte[],HslCommunication.OperateResult,System.String)">
            <summary>
            仅仅将数据发送到socket对象上去，如果异常，则结束通信
            </summary>
            <param name="socket"></param>
            <param name="send"></param>
            <param name="result"></param>
            <param name="exceptionMessage"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetBase.CheckRomoteReceived(System.Net.Sockets.Socket,System.Int64,System.Action{System.Int64,System.Int64},HslCommunication.OperateResult,System.String)">
            <summary>
            确认对方是否已经接收完成数据，如果异常，则结束通信
            </summary>
            <param name="socket"></param>
            <param name="length"></param>
            <param name="report"></param>
            <param name="result"></param>
            <param name="exceptionMessage"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetBase.CheckTokenPermission(System.Net.Sockets.Socket,System.Byte[],System.Guid,HslCommunication.OperateResult)">
            <summary>
            检查令牌是否正确，如果不正确，结束网络通信
            </summary>
            <param name="socket">套接字</param>
            <param name="head">头子令</param>
            <param name="token">令牌</param>
            <param name="result">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetBase.SendFileStreamToSocket(System.Net.Sockets.Socket,System.String,System.Int64,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            将文件数据发送至套接字，如果结果异常，则结束通讯
            </summary>
            <param name="socket"></param>
            <param name="filename"></param>
            <param name="filelength"></param>
            <param name="result"></param>
            <param name="report"></param>
            <param name="exceptionMessage"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetBase.ReceiveFileSteamFromSocket(System.Net.Sockets.Socket,System.String,System.Int64,System.Action{System.Int64,System.Int64},HslCommunication.OperateResult,System.String)">
            <summary>
            从套接字中接收一个文件数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket"></param>
            <param name="filename"></param>
            <param name="receive"></param>
            <param name="report"></param>
            <param name="result"></param>
            <param name="exceptionMessage"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetBase.CombineExceptionString(System.String,System.String)">
            <summary>
            获取错误的用于显示的信息
            </summary>
            <param name="message"></param>
            <param name="exception"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.NetShareBase">
            <summary>
            客户端服务端都拥有的一些方法
            </summary>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.SendBytesAsync(HslCommunication.Enthernet.AsyncStateOne,System.Byte[])">
            <summary>
            发送数据的方法
            </summary>
            <param name="stateOne">通信用的核心对象</param>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.SendCallBack(System.IAsyncResult)">
            <summary>
            发送回发方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.ReBeginReceiveHead(HslCommunication.Enthernet.AsyncStateOne,System.Boolean)">
            <summary>
            重新开始接收下一次的数据传递
            </summary>
            <param name="receive">网络状态</param>
            <param name="isProcess">是否触发数据处理</param>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.HeadReceiveCallback(System.IAsyncResult)">
            <summary>
            指令头接收方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.SocketReceiveException(HslCommunication.Enthernet.AsyncStateOne,System.Exception)">
            <summary>
            接收出错的时候进行处理
            </summary>
            <param name="receive"></param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.ContentReceiveCallback(System.IAsyncResult)">
            <summary>
            数据内容接收方法
            </summary>
            <param name="ar"></param>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.SendBaseAndCheckReceive(System.Net.Sockets.Socket,System.Int32,System.Int32,System.Byte[],HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 发送字节数据并确认对方接收完成数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="headcode">头指令</param>
            <param name="customer">用户指令</param>
            <param name="send">发送的数据</param>
            <param name="result">用于返回的结果</param>
            <param name="sendReport">发送的进度报告</param>
            <param name="failedString">失败时存储的额外描述信息</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.SendBytesAndCheckReceive(System.Net.Sockets.Socket,System.Int32,System.Byte[],HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 发送字节数据并确认对方接收完成数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="customer">用户指令</param>
            <param name="send">发送的数据</param>
            <param name="result">用于返回的结果</param>
            <param name="sendReport">发送的进度报告</param>
            <param name="failedString">异常时记录到日志的附加信息</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.SendStringAndCheckReceive(System.Net.Sockets.Socket,System.Int32,System.String,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 直接发送字符串数据并确认对方接收完成数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="customer">用户指令</param>
            <param name="send">发送的数据</param>
            <param name="result">用于返回的结果</param>
            <param name="sendReport">发送的进度报告</param>
            <param name="failedString"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.SendFileAndCheckReceive(System.Net.Sockets.Socket,System.String,System.String,System.String,System.String,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 将文件数据发送至套接字，具体发送细节将在继承类中实现，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <param name="filename">文件名称，文件必须存在</param>
            <param name="servername">远程端的文件名称</param>
            <param name="filetag">文件的额外标签</param>
            <param name="fileupload">文件的上传人</param>
            <param name="result">操作结果对象</param>
            <param name="sendReport">发送进度报告</param>
            <param name="failedString"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.SendFileAndCheckReceive(System.Net.Sockets.Socket,System.IO.Stream,System.String,System.String,System.String,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 将流数据发送至套接字，具体发送细节将在继承类中实现，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <param name="stream">文件名称，文件必须存在</param>
            <param name="servername">远程端的文件名称</param>
            <param name="filetag">文件的额外标签</param>
            <param name="fileupload">文件的上传人</param>
            <param name="result">操作结果对象</param>
            <param name="sendReport">发送进度报告</param>
            <param name="failedString"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.ReceiveAndCheckBytes(System.Net.Sockets.Socket,System.Byte[]@,System.Byte[]@,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 接收一条完整的同步数据，包含头子节和内容字节，基础的数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <param name="head">头子节</param>
            <param name="content">内容字节</param>
            <param name="result">结果</param>
            <param name="receiveReport">接收进度反馈</param>
            <param name="failedString">失败时用于显示的字符串</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException">result</exception>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.ReceiveStringFromSocket(System.Net.Sockets.Socket,System.Int32@,System.String@,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 从网络中接收一个字符串数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <param name="customer">接收的用户数据</param>
            <param name="receive">接收的字节数据</param>
            <param name="result">结果信息对象</param>
            <param name="receiveReport">接收数据时的进度报告</param>
            <param name="failedString">失败时记录日志的字符串</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.ReceiveContentFromSocket(System.Net.Sockets.Socket,System.Int32@,System.Byte[]@,HslCommunication.OperateResult,System.String)">
            <summary>
            [自校验] 从网络中接收一串字节数据，如果结果异常，则结束通讯
            </summary>
            <param name="socket">套接字</param>
            <param name="customer">接收的用户数据</param>
            <param name="data">接收的字节数据</param>
            <param name="result">结果信息对象</param>
            <param name="failedString">失败时记录日志的字符串</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.ReceiveFileHeadFromSocket(System.Net.Sockets.Socket,System.String@,System.Int64@,System.String@,System.String@,HslCommunication.OperateResult,System.String)">
            <summary>
            [自校验] 从套接字中接收文件头信息
            </summary>
            <param name="socket"></param>
            <param name="filename"></param>
            <param name="size"></param>
            <param name="filetag"></param>
            <param name="fileupload"></param>
            <param name="result"></param>
            <param name="failedString"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.ReceiveFileFromSocket(System.Net.Sockets.Socket,System.String,System.String@,System.Int64@,System.String@,System.String@,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 从网络中接收一个文件，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="savename">接收文件后保存的文件名</param>
            <param name="filename">文件在对方电脑上的文件名</param>
            <param name="size">文件大小</param>
            <param name="filetag">文件的标识</param>
            <param name="fileupload">文件的上传人</param>
            <param name="result">结果信息对象</param>
            <param name="receiveReport">接收进度报告</param>
            <param name="failedString">失败时的记录日志字符串</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.ReceiveFileFromSocket(System.Net.Sockets.Socket,System.IO.Stream,System.String@,System.Int64@,System.String@,System.String@,HslCommunication.OperateResult,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            [自校验] 从网络中接收一个文件，写入数据流，如果结果异常，则结束通讯
            </summary>
            <param name="socket">网络套接字</param>
            <param name="stream">等待写入的数据流</param>
            <param name="filename">文件在对方电脑上的文件名</param>
            <param name="size">文件大小</param>
            <param name="filetag">文件的标识</param>
            <param name="fileupload">文件的上传人</param>
            <param name="result">结果信息对象</param>
            <param name="receiveReport">接收进度报告</param>
            <param name="failedString">失败时的记录日志字符串</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.DeleteFileByName(System.String)">
            <summary>
            删除文件的操作
            </summary>
            <param name="filename"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.PreprocessFolderName(System.String)">
            <summary>
            预处理文件夹的名称，除去文件夹名称最后一个'\'，如果有的话
            </summary>
            <param name="folder">文件夹名称</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.NetShareBase.DataProcessingCenter(HslCommunication.Enthernet.AsyncStateOne,System.Int32,System.Int32,System.Byte[])">
            <summary>
            数据处理中心，应该继承重写
            </summary>
            <param name="receive">连接状态</param>
            <param name="protocol">协议头</param>
            <param name="customer">用户自定义</param>
            <param name="content">数据内容</param>
        </member>
        <member name="T:HslCommunication.Core.NetServerBase">
            <summary>
            所有服务器类对象的基类，添加了一些服务器属性
            </summary>
        </member>
        <member name="P:HslCommunication.Core.NetServerBase.IsStarted">
            <summary>
            服务器引擎是否启动
            </summary>
        </member>
        <member name="M:HslCommunication.Core.NetServerBase.AsyncAcceptCallback(System.IAsyncResult)">
            <summary>
            异步传入的连接申请请求
            </summary>
            <param name="iar"></param>
        </member>
        <member name="M:HslCommunication.Core.NetServerBase.ThreadPoolLogin(System.Object)">
            <summary>
            用于登录的回调方法
            </summary>
            <param name="obj">socket对象</param>
        </member>
        <member name="M:HslCommunication.Core.NetServerBase.StartInitialization">
            <summary>
            服务器启动时额外的初始化信息
            </summary>
        </member>
        <member name="M:HslCommunication.Core.NetServerBase.ServerStart(System.Int32)">
            <summary>
            启动服务器的引擎
            </summary>
            <param name="port">指定一个端口号</param>
        </member>
        <member name="M:HslCommunication.Core.NetServerBase.CloseAction">
            <summary>
            服务器关闭的时候需要做的事情
            </summary>
        </member>
        <member name="M:HslCommunication.Core.NetServerBase.ServerClose">
            <summary>
            关闭服务器的引擎
            </summary>
        </member>
        <member name="T:HslCommunication.Core.FileServerBase">
            <summary>
            文件服务器的基类，提供了对文件的基本操作
            </summary>
        </member>
        <member name="F:HslCommunication.Core.FileServerBase.m_dictionary_files_marks">
            <summary>
            所有文件操作的词典锁
            </summary>
        </member>
        <member name="F:HslCommunication.Core.FileServerBase.hybirdLock">
            <summary>
            词典的锁
            </summary>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.GetFileMarksFromDictionaryWithFileName(System.String)">
            <summary>
            获取当前文件的读写锁，如果没有会自动创建
            </summary>
            <param name="filename">完整的文件路径</param>
            <returns>读写锁</returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.ReceiveInformationHead(System.Net.Sockets.Socket,System.Int32@,System.String@,System.String@,System.String@,System.String@,HslCommunication.OperateResult,System.String)">
            <summary>
            接收本次操作的信息头数据
            </summary>
            <param name="socket">网络套接字</param>
            <param name="command">命令</param>
            <param name="fileName">文件名</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="result">结果对象</param>
            <param name="failedString">失败的字符串</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.CreateRandomFileName">
            <summary>
            获取一个随机的文件名，由GUID码和随机数字组成
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.ReturnAbsoluteFilePath(System.String,System.String,System.String)">
            <summary>
            返回服务器的绝对路径
            </summary>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.ReturnAbsoluteFileName(System.String,System.String,System.String,System.String)">
            <summary>
            返回服务器的绝对路径
            </summary>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.ReturnRelativeFileName(System.String,System.String,System.String,System.String)">
            <summary>
            返回相对路径的名称
            </summary>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.MoveFileToNewFile(System.String,System.String)">
            <summary>
            移动一个文件到新的文件去
            </summary>
            <param name="fileNameOld"></param>
            <param name="fileNameNew"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.DeleteFileAndCheck(System.Net.Sockets.Socket,System.String,HslCommunication.OperateResult)">
            <summary>
            删除文件并回发确认信息，如果结果异常，则结束通讯
            </summary>
            <param name="socket"></param>
            <param name="fullname"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.StartInitialization">
            <summary>
            服务器启动时的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.CheckFolderAndCreate">
            <summary>
            检查文件夹是否存在，不存在就创建
            </summary>
        </member>
        <member name="P:HslCommunication.Core.FileServerBase.FilesDirectoryPath">
            <summary>
            文件所存储的路径
            </summary>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.GetDirectoryFiles(System.String,System.String,System.String)">
            <summary>
            获取文件夹的所有文件列表
            </summary>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.FileServerBase.GetDirectories(System.String,System.String,System.String)">
            <summary>
            获取文件夹的所有文件夹列表
            </summary>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Core.DoubleModeNetBase">
            <summary>
            双模式客户端基类，允许实现两种模式，短连接和长连接的机制
            </summary>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.#ctor">
            <summary>
            构造函数
            </summary>
        </member>
        <member name="F:HslCommunication.Core.DoubleModeNetBase.serverEndPoint">
            <summary>
            服务器的连接端口
            </summary>
        </member>
        <member name="P:HslCommunication.Core.DoubleModeNetBase.ReceiveBackTimeOut">
            <summary>
            读取数据的时候指示超时检查时间，默认10秒，如果为负数，则不接收服务器的返回
            </summary>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.ConnectServer">
            <summary>
            切换短连接模式到长连接模式，后面的每次请求都共享一个通道
            </summary>
            <returns>返回连接结果，如果失败的话（也即IsSuccess为False），包含失败信息</returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.ConnectClose">
            <summary>
            在长连接模式下，断开服务器的连接，并切换到短连接模式
            </summary>
            <returns>关闭连接，不需要查看IsSuccess属性查看</returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBoolResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetByteResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetInt16ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},System.Boolean)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <param name="reverse">是否需要反转结果</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetUInt16ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},System.Boolean)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <param name="reverse">是否需要反转结果</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetInt32ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},System.Boolean)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <param name="reverse">是否需要反转结果</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetUInt32ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},System.Boolean)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <param name="reverse">是否需要反转结果</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetInt64ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},System.Boolean)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <param name="reverse">是否需要反转结果</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetUInt64ResultFromBytes(HslCommunication.OperateResult{System.Byte[]},System.Boolean)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <param name="reverse">是否需要反转结果</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetFloatResultFromBytes(HslCommunication.OperateResult{System.Byte[]},System.Boolean)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <param name="reverse">是否需要反转结果</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetDoubleResultFromBytes(HslCommunication.OperateResult{System.Byte[]},System.Boolean)">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <param name="reverse">是否需要反转结果</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetStringResultFromBytes(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            将指定的OperateResult类型转化
            </summary>
            <param name="read">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.InitilizationOnConnect(System.Net.Sockets.Socket,HslCommunication.OperateResult)">
            <summary>
            连接上服务器后需要进行的初始化操作
            </summary>
            <param name="socket">网络套接字</param>
            <param name="result">结果数据对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.ExtraOnDisconnect(System.Net.Sockets.Socket,HslCommunication.OperateResult)">
            <summary>
            在将要和服务器进行断开的情况下额外的操作
            </summary>
            <param name="socket">网络套接字</param>
            <param name="result">结果对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetIPEndPoint">
            <summary>
            获取最终连接的网络点
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetWorkSocket(HslCommunication.OperateResult@)">
            <summary>
            获取主要工作的网络服务
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.CreateSocketByDoubleMode(System.Net.Sockets.Socket@,HslCommunication.OperateResult)">
            <summary>
            根据模式创建新的网络连接，或者时利用旧的网络服务
            </summary>
            <param name="socket">新生成的网络请求</param>
            <param name="result">结果信息</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.ReceiveResponse(System.Net.Sockets.Socket,System.Byte[]@,HslCommunication.OperateResult)">
            <summary>
            接收来自服务器的响应数据，该方法需要在派生类中重写
            </summary>
            <param name="socket"></param>
            <param name="response"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.SendCommandAndReceiveResponse(System.Byte[],System.Byte[]@,HslCommunication.OperateResult)">
            <summary>
            发送网数据到网络上去，并接收来自网络的反馈，接收反馈超时时间
            </summary>
            <param name="send"></param>
            <param name="receive"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.ReadFromServerCore(System.Byte[])">
            <summary>
            读写服务器的核心方法，直接发送基础报文，接收服务器的报文返回，可用于测试报文是否正确及二次扩展成自己的API
            </summary>
            <param name="send">发送的原始字节数据</param>
            <returns>读取结果，如果失败，还带有失败信息</returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBytesFromArray(System.Int16[],System.Boolean)">
            <summary>
            根据short[]进行转换到byte[]数组
            </summary>
            <param name="data"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBytesFromArray(System.UInt16[],System.Boolean)">
            <summary>
            根据ushort[]进行转换到byte[]数组
            </summary>
            <param name="data"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBytesFromArray(System.Int32[],System.Boolean)">
            <summary>
            int[]进行转换到byte[]数组
            </summary>
            <param name="data"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBytesFromArray(System.UInt32[],System.Boolean)">
            <summary>
            uint[]进行转换到byte[]数组
            </summary>
            <param name="data"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBytesFromArray(System.Single[],System.Boolean)">
            <summary>
            float[]进行转换到byte[]数组
            </summary>
            <param name="data"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBytesFromArray(System.Int64[],System.Boolean)">
            <summary>
            long[]进行转换到byte[]数组
            </summary>
            <param name="data"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBytesFromArray(System.UInt64[],System.Boolean)">
            <summary>
            long[]进行转换到byte[]数组
            </summary>
            <param name="data"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Core.DoubleModeNetBase.GetBytesFromArray(System.Double[],System.Boolean)">
            <summary>
            long[]进行转换到byte[]数组
            </summary>
            <param name="data"></param>
            <param name="reverse"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.DeviceNet">
            <summary>
            通用设备的基础网络信息
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.DeviceNet.#ctor">
            <summary>
            实例化一个通用的设备类
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.DeviceNet.ClientOnline">
            <summary>
            当客户端上线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.DeviceNet.ClientOffline">
            <summary>
            当客户端下线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.DeviceNet.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.DeviceNet.ThreadPoolLogin(System.Object)">
            <summary>
            登录后的处理方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.DeviceState">
            <summary>
            通用设备的基础状态
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.DeviceEndPoint">
            <summary>
            设备的连接地址
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.ConnectTime">
            <summary>
            设备的连接时间
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.WorkSocket">
            <summary>
            网络套接字
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.ReceiveTime">
            <summary>
            上次接收到信息的时间
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.DeviceState.IpAddress">
            <summary>
            设备的ip地址
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.DeviceState.Buffer">
            <summary>
            缓冲内存块
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.FileClientBase">
            <summary>
            文件传输客户端基类
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.FileClientBase.ServerIpEndPoint">
            <summary>
            服务器端的文件管理引擎终结点
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.SendFactoryGroupId(System.Net.Sockets.Socket,System.String,System.String,System.String,HslCommunication.OperateResult)">
            <summary>
            发送三个文件分类到服务器端
            </summary>
            <param name="socket"></param>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.DeleteFileBase(System.String,System.String,System.String,System.String)">
            <summary>
            删除服务器上的文件
            </summary>
            <param name="fileName">文件的名称</param>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.DownloadFileBase(System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64},System.Object)">
            <summary>
            基础下载信息
            </summary>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="fileName">服务器的文件名称</param>
            <param name="processReport">下载的进度报告</param>
            <param name="source">数据源信息，决定最终存储到哪里去</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileClientBase.UploadFileBase(System.Object,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传文件给服务器
            </summary>
            <param name="source">数据源，可以是文件名，也可以是数据流</param>
            <param name="serverName">在服务器保存的文件名，不包含驱动器路径</param>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <param name="fileTag">文件的描述</param>
            <param name="fileUpload">文件的上传人</param>
            <param name="processReport">汇报进度</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.IntegrationFileClient">
            <summary>
            负责分类文件传输的客户端，用来上传，下载文件信息
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DeleteFile(System.String,System.String,System.String,System.String)">
            <summary>
            删除服务器的文件操作
            </summary>
            <param name="fileName">文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadFile(System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64},System.String)">
            <summary>
            下载服务器的文件到本地的文件操作
            </summary>
            <param name="fileName">文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="processReport">下载的进度报告</param>
            <param name="fileSaveName">准备本地保存的名称</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadFile(System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64},System.IO.Stream)">
            <summary>
            下载服务器的文件到本地的数据流中
            </summary>
            <param name="fileName">文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="processReport">下载的进度报告</param>
            <param name="stream">流数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadFile(System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64},System.Drawing.Bitmap@)">
            <summary>
            下载服务器的文件到本地的数据流中
            </summary>
            <param name="fileName">文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="processReport">下载的进度报告</param>
            <param name="bitmap">内存文件</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.UploadFile(System.String,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传本地的文件到服务器操作
            </summary>
            <param name="fileName">本地的完整路径的文件名称</param>
            <param name="serverName">服务器存储的文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="fileTag">文件的额外描述</param>
            <param name="fileUpload">文件的上传人</param>
            <param name="processReport">上传的进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.UploadFile(System.IO.Stream,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传数据流到服务器操作
            </summary>
            <param name="stream">数据流内容</param>
            <param name="serverName">服务器存储的文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="fileTag">文件的额外描述</param>
            <param name="fileUpload">文件的上传人</param>
            <param name="processReport">上传的进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.UploadFile(System.Drawing.Bitmap,System.String,System.String,System.String,System.String,System.String,System.String,System.Action{System.Int64,System.Int64})">
            <summary>
            上传内存图片到服务器操作
            </summary>
            <param name="bitmap">内存图片，不能为空</param>
            <param name="serverName">服务器存储的文件名称，带后缀</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="fileTag">文件的额外描述</param>
            <param name="fileUpload">文件的上传人</param>
            <param name="processReport">上传的进度报告</param>
            <returns></returns>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.TranslateFileName(System.String,System.String,System.String,System.String)">
            <summary>
            根据三种分类信息，还原成在服务器的相对路径，包含文件
            </summary>
            <param name="fileName">文件名称，包含后缀名</param>
            <param name="factory">第一类</param>
            <param name="group">第二类</param>
            <param name="id">第三类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.TranslatePathName(System.String,System.String,System.String)">
            <summary>
            根据三种分类信息，还原成在服务器的相对路径，仅仅路径
            </summary>
            <param name="factory">第一类</param>
            <param name="group">第二类</param>
            <param name="id">第三类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadPathFileNames(HslCommunication.Enthernet.GroupFileItem[]@,System.String,System.String,System.String)">
            <summary>
            获取指定路径下的所有的文档
            </summary>
            <param name="fileNames">获取得到的文件合集</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadPathFolders(System.String[]@,System.String,System.String,System.String)">
            <summary>
            获取指定路径下的所有的文档
            </summary>
            <param name="folders"></param>
            <param name="factory"></param>
            <param name="group"></param>
            <param name="id"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.IntegrationFileClient.DownloadStringArrays``1(``0[]@,System.Int32,System.String,System.String,System.String)">
            <summary>
            获取指定路径下的所有的文档
            </summary>
            <param name="arrays">想要获取的队列</param>
            <param name="protocol">指令</param>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <typeparam name="T">数组的类型</typeparam>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.AdvancedFileServer">
            <summary>
            文件管理类服务器，负责服务器所有分类文件的管理，特点是不支持文件附加数据，但是支持直接访问文件名
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.ThreadPoolLogin(System.Object)">
            <summary>
            处理数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.StartInitialization">
            <summary>
            初始化数据
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.CheckFolderAndCreate">
            <summary>
            检查文件夹
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AdvancedFileServer.ReceiveFileFromSocketAndMoveFile(System.Net.Sockets.Socket,System.String,System.String,System.String@,System.Int64@,System.String@,System.String@,HslCommunication.OperateResult)">
            <summary>
            从网络套接字接收文件并移动到目标的文件夹中，如果结果异常，则结束通讯
            </summary>
            <param name="socket"></param>
            <param name="savename"></param>
            <param name="fileNameNew"></param>
            <param name="filename"></param>
            <param name="size"></param>
            <param name="filetag"></param>
            <param name="fileupload"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="P:HslCommunication.Enthernet.AdvancedFileServer.FilesDirectoryPathTemp">
            <summary>
            用于接收上传文件时的临时文件夹，临时文件使用结束后会被删除
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.UltimateFileServer">
            <summary>
            终极文件管理服务器，实现所有的文件分类管理，读写分离，不支持直接访问文件名
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.UltimateFileServer.m_dictionary_group_marks">
            <summary>
            所有文件组操作的词典锁
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.UltimateFileServer.hybirdLock">
            <summary>
            词典的锁
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.GetGroupFromFilePath(System.String)">
            <summary>
            获取当前目录的读写锁，如果没有会自动创建
            </summary>
            <param name="filePath">相对路径名</param>
            <returns>读写锁</returns>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.ReceiveFileFromSocketAndUpdateGroup(System.Net.Sockets.Socket,System.String,HslCommunication.OperateResult)">
            <summary>
            从套接字接收文件并保存，更新文件列表
            </summary>
            <param name="socket">套接字</param>
            <param name="savename">保存的文件名</param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.TransformFactFileName(System.String,System.String,System.String,System.String)">
            <summary>
            根据文件的显示名称转化为真实存储的名称
            </summary>
            <param name="factory">第一大类</param>
            <param name="group">第二大类</param>
            <param name="id">第三大类</param>
            <param name="fileName">文件显示名称</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.UltimateFileServer.ThreadPoolLogin(System.Object)">
            <summary>
            处理数据
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.GroupFileContainer">
            <summary>
            文件集容器，绑定一个文件夹的文件信息组
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.#ctor(HslCommunication.LogNet.ILogNet,System.String)">
            <summary>
            实例化一个新的数据管理容器
            </summary>
            <param name="logNet">日志记录对象，可以为空</param>
            <param name="path"></param>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileContainer.JsonArrayContent">
            <summary>
            包含所有文件列表信息的json文本缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileContainer.FileCount">
            <summary>
            获取文件的数量
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.GroupFileContainer.FileCountChanged">
            <summary>
            当文件数量发生变化的时候触发的事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.GetCurrentFileMappingName(System.String)">
            <summary>
            下载文件时调用
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.UpdateFileMappingName(System.String,System.Int64,System.String,System.String,System.String)">
            <summary>
            上传文件时掉用
            </summary>
            <param name="fileName">文件名，带后缀，不带任何的路径</param>
            <param name="fileSize">文件的大小</param>
            <param name="mappingName">文件映射名称</param>
            <param name="owner">文件的拥有者</param>
            <param name="description">文件的额外描述</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.DeleteFile(System.String)">
            <summary>
            删除一个文件信息
            </summary>
            <param name="fileName"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.CacheJsonArrayContent">
            <summary>
            缓存JSON文本的方法，该机制使用乐观并发模型完成
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileContainer.GroupFileContainerLoadByPath(System.String)">
            <summary>
            从目录进行加载数据，必须实例化的时候加载，加载失败会导致系统异常，旧的文件丢失
            </summary>
            <param name="path"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.GroupFileItem">
            <summary>
            单个文件的存储
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.FileName">
            <summary>
            文件的名称
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.FileSize">
            <summary>
            文件的大小
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.MappingName">
            <summary>
            文件的映射名称
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.DownloadTimes">
            <summary>
            文件的下载次数
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.UploadTime">
            <summary>
            文件的上传时间
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.Owner">
            <summary>
            文件的上传人，拥有者
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.GroupFileItem.Description">
            <summary>
            文件的额外描述
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.GroupFileItem.GetTextFromFileSize">
            <summary>
            获取大小
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.FileMarkId">
            <summary>
            文件标记对象类
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.#ctor(HslCommunication.LogNet.ILogNet,System.String)">
            <summary>
            实例化一个文件标记对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.AddOperation(System.Action)">
            <summary>
            新增一个文件的操作，仅仅是删除文件
            </summary>
            <param name="action"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.CanClear">
            <summary>
            指示该对象是否能被清除
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.EnterReadOperator">
            <summary>
            进入文件的读取状态
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.FileMarkId.LeaveReadOperator">
            <summary>
            离开本次的文件读取状态
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.NetComplexServer">
            <summary>
            基于TCP的服务器引擎端核心类
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.#ctor">
            <summary>
            实例化一个网络服务器类对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.ConnectMax">
            <summary>
            所支持的同时在线客户端的最大数量，商用限制1000个，最小10个
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.FormatClientOnline">
            <summary>
            客户端在线信息显示的格式化文本，如果自定义，必须#开头，
            示例："#IP:{0} Name:{1}"
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.NetComplexServer.m_AllClients">
            <summary>
            客户端在线信息缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.AsyncCoordinator">
            <summary>
            一个计算上线下线的高性能缓存对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.IsSaveLogClientLineChange">
            <summary>
            计算所有客户端在线的信息
            </summary>
            <summary>
            获取或设置服务器是否记录客户端上下线信息
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.ClientCount">
            <summary>
            所有在线客户端的数量
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexServer.All_sockets_connect">
            <summary>
            所有的客户端连接的核心对象
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.NetComplexServer.HybirdLockSockets">
            <summary>
            客户端数组操作的线程混合锁
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.StartInitialization">
            <summary>
            初始化操作
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.CloseAction">
            <summary>
            关闭网络时的操作
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.AllClientsStatusChange">
            <summary>
            客户端的上下限状态变更时触发，仅作为在线客户端识别
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.ClientOnline">
            <summary>
            当客户端上线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.ClientOffline">
            <summary>
            当客户端下线的时候，触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexServer.AcceptByte">
            <summary>
            当接收到字节数据的时候,触发此事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.ThreadPoolLogin(System.Object)">
            <summary>
            登录后的处理方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.Send(HslCommunication.Enthernet.AsyncStateOne,HslCommunication.NetHandle,System.String)">
            <summary>
            服务器端用于数据发送文本的方法
            </summary>
            <param name="stateone">数据发送对象</param>
            <param name="customer">用户自定义的数据对象，如不需要，赋值为0</param>
            <param name="str">发送的文本</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.Send(HslCommunication.Enthernet.AsyncStateOne,HslCommunication.NetHandle,System.Byte[])">
            <summary>
            服务器端用于发送字节的方法
            </summary>
            <param name="stateone">数据发送对象</param>
            <param name="customer">用户自定义的数据对象，如不需要，赋值为0</param>
            <param name="bytes">实际发送的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SendAllClients(HslCommunication.NetHandle,System.String)">
            <summary>
            服务端用于发送所有数据到所有的客户端
            </summary>
            <param name="customer">用户自定义的命令头</param>
            <param name="str">需要传送的实际的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SendAllClients(HslCommunication.NetHandle,System.Byte[])">
            <summary>
            服务端用于发送所有数据到所有的客户端
            </summary>
            <param name="customer">用户自定义的命令头</param>
            <param name="data">需要群发客户端的字节数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SendClientByAlias(System.String,HslCommunication.NetHandle,System.String)">
            <summary>
            根据客户端设置的别名进行发送消息
            </summary>
            <param name="Alias">客户端上线的别名</param>
            <param name="customer">用户自定义的命令头</param>
            <param name="str">需要传送的实际的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.SendClientByAlias(System.String,HslCommunication.NetHandle,System.Byte[])">
            <summary>
            根据客户端设置的别名进行发送消息
            </summary>
            <param name="Alias">客户端上线的别名</param>
            <param name="customer">用户自定义的命令头</param>
            <param name="data">需要传送的实际的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexServer.DataProcessingCenter(HslCommunication.Enthernet.AsyncStateOne,System.Int32,System.Int32,System.Byte[])">
            <summary>
            数据处理中心
            </summary>
            <param name="receive"></param>
            <param name="protocol"></param>
            <param name="customer"></param>
            <param name="content"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.NetComplexClient">
            <summary>
            基于TCP通信的客户端核心类
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.NetComplexClient.stateone">
            <summary>
            客户端的核心连接块
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.Is_Client_Start">
            <summary>
            客户端系统是否启动
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.Connect_Failed_Count">
            <summary>
            重连接失败的次数
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.NetComplexClient.Is_Client_Connecting">
            <summary>
            指示客户端是否处于正在连接服务器中
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.NetComplexClient.lock_connecting">
            <summary>
            登录服务器的判断锁
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.ClientAlias">
            <summary>
            客户端登录的标识名称，可以为ID号，也可以为登录名
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.EndPointServer">
            <summary>
            远程服务器的IP地址和端口
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.ServerTime">
            <summary>
            服务器的时间，自动实现和服务器同步
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetComplexClient.DelayTime">
            <summary>
            系统与服务器的延时时间，单位毫秒
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.LoginSuccess">
            <summary>
            客户端启动成功的事件，重连成功也将触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.LoginFailed">
            <summary>
            连接失败时触发的事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.MessageAlerts">
            <summary>
            服务器的异常，启动，等等一般消息产生的时候，出发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.BeforReConnected">
            <summary>
            在客户端断开后并在重连服务器之前触发，用于清理系统资源
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetComplexClient.AcceptByte">
            <summary>
            当接收到字节数据的时候,触发此事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.ClientClose">
            <summary>
            关闭该客户端引擎
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.ClientStart">
            <summary>
            启动客户端引擎，连接服务器系统
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.SocketReceiveException(HslCommunication.Enthernet.AsyncStateOne,System.Exception)">
            <summary>
            通信出错后的处理
            </summary>
            <param name="receive"></param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.Send(HslCommunication.NetHandle,System.String)">
            <summary>
            服务器端用于数据发送文本的方法
            </summary>
            <param name="customer">用户自定义的命令头</param>
            <param name="str">发送的文本</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.Send(HslCommunication.NetHandle,System.Byte[])">
            <summary>
            服务器端用于发送字节的方法
            </summary>
            <param name="customer">用户自定义的命令头</param>
            <param name="bytes">实际发送的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.DataProcessingCenter(HslCommunication.Enthernet.AsyncStateOne,System.Int32,System.Int32,System.Byte[])">
            <summary>
            客户端的数据处理中心
            </summary>
            <param name="receive"></param>
            <param name="protocol"></param>
            <param name="customer"></param>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetComplexClient.ThreadHeartCheck">
            <summary>
            心跳线程的方法
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.NetSimplifyClient">
            <summary>
            用户同步访问数据的客户端类
            在客户端设置参数后，调用方法即可成功读取服务器数据，甚至是文件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            实例化一个客户端的对象，用于和服务器通信
            </summary>
            <param name="end_point">服务器的通信地址</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个客户端的对象，用于和服务器通信
            </summary>
            <param name="ipAddress">服务器的Ip地址</param>
            <param name="port">服务器的端口</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.ReadFromServer(HslCommunication.NetHandle,System.String,System.Action{System.Int64,System.Int64},System.Action{System.Int64,System.Int64})">
            <summary>
            客户端向服务器进行请求，请求字符串数据
            </summary>
            <param name="customer">用户的指令头</param>
            <param name="send">发送数据</param>
            <param name="sendStatus">发送数据时的进度报告</param>
            <param name="receiveStatus">接收数据时的进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.ReadFromServer(HslCommunication.NetHandle,System.Byte[],System.Action{System.Int64,System.Int64},System.Action{System.Int64,System.Int64})">
            <summary>
            客户端向服务器进行请求，请求字节数据
            </summary>
            <param name="customer">用户的指令头</param>
            <param name="send"></param>
            <param name="sendStatus">发送数据的进度报告</param>
            <param name="receiveStatus">接收数据的进度报告</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyClient.ReadFromServerBase(System.Int32,System.Int32,System.Byte[],System.Action{System.Int64,System.Int64},System.Action{System.Int64,System.Int64})">
            <summary>
            需要发送的底层数据
            </summary>
            <param name="headcode">数据的指令头</param>
            <param name="customer">用户的指令头</param>
            <param name="send">需要发送的底层数据</param>
            <param name="sendStatus">发送状态的进度报告，用于显示上传进度</param>
            <param name="receiveStatus">接收状态的进度报告，用于显示下载进度</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.NetSimplifyServer">
            <summary>
            同步数据交换的服务器端类，先配置相关的参数，再启动系统
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetSimplifyServer.ReceiveStringEvent">
            <summary>
            接收字符串信息的事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetSimplifyServer.ReceivedBytesEvent">
            <summary>
            接收字节信息的事件
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.CloseAction">
            <summary>
            关闭网络的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.SendMessage(HslCommunication.Enthernet.AsyncStateOne,System.Int32,System.String)">
            <summary>
            向指定的通信对象发送字符串数据
            </summary>
            <param name="state">通信对象</param>
            <param name="customer">用户的指令头</param>
            <param name="str">实际发送的字符串数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.SendMessage(HslCommunication.Enthernet.AsyncStateOne,System.Int32,System.Byte[])">
            <summary>
            向指定的通信对象发送字节数据
            </summary>
            <param name="state">连接对象</param>
            <param name="customer">用户的指令头</param>
            <param name="bytes">实际的数据</param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.ThreadPoolLogin(System.Object)">
            <summary>
            处理请求接收连接后的方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.SocketReceiveException(HslCommunication.Enthernet.AsyncStateOne,System.Exception)">
            <summary>
            处理异常的方法
            </summary>
            <param name="receive"></param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.DataProcessingCenter(HslCommunication.Enthernet.AsyncStateOne,System.Int32,System.Int32,System.Byte[])">
            <summary>
            数据处理中心
            </summary>
            <param name="receive"></param>
            <param name="protocol"></param>
            <param name="customer"></param>
            <param name="content"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSimplifyServer.SynchronalReceiveCallback(System.Net.Sockets.Socket)">
            <summary>
            同步数据的接收的块
            </summary>
            <param name="socket">网络的套接字</param>
        </member>
        <member name="T:HslCommunication.Enthernet.NetSoftUpdateServer">
            <summary>
            用于服务器支持软件全自动更新升级的类
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSoftUpdateServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetSoftUpdateServer.FileUpdatePath">
            <summary>
            系统升级时客户端所在的目录，默认为C:\HslCommunication
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetSoftUpdateServer.ThreadPoolLogin(System.Object)">
            <summary>
            系统的登录方法
            </summary>
            <param name="obj"></param>
        </member>
        <member name="T:HslCommunication.Enthernet.NetUdpServer">
            <summary>
            一个用于UDP通信的类，服务器端用来接收所有客户端发送数据的功能
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.NetUdpServer.ReceiveCacheLength">
            <summary>
            获取或设置一次接收时的数据长度，默认2KB数据长度
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.ServerStart(System.Int32)">
            <summary>
            根据指定的端口启动Upd侦听
            </summary>
            <param name="port"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.CloseAction">
            <summary>
            关闭引擎的操作
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.RefreshReceive">
            <summary>
            重新开始接收数据
            </summary>
            <exception cref="T:System.ArgumentNullException"></exception>
            
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpServer.DataProcessingCenter(HslCommunication.Enthernet.AsyncStateOne,System.Int32,System.Int32,System.Byte[])">
            <summary>
            数据处理中心
            </summary>
            <param name="receive"></param>
            <param name="protocol"></param>
            <param name="customer"></param>
            <param name="content"></param>
        </member>
        <member name="E:HslCommunication.Enthernet.NetUdpServer.AcceptString">
            <summary>
            当接收到文本数据的时候,触发此事件
            </summary>
        </member>
        <member name="E:HslCommunication.Enthernet.NetUdpServer.AcceptByte">
            <summary>
            当接收到字节数据的时候,触发此事件
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.NetUdpClient">
            <summary>
            UDP客户端的类，只负责发送数据到服务器，该数据经过封装
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpClient.#ctor(System.Net.IPEndPoint)">
            <summary>
            实例化对象，
            </summary>
            <param name="endpoint"></param>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpClient.SendMessage(HslCommunication.NetHandle,System.Byte[])">
            <summary>
            发送字节数据到服务器
            </summary>
            <param name="customer">用户自定义的标记数据</param>
            <param name="data">字节数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="M:HslCommunication.Enthernet.NetUdpClient.SendMessage(HslCommunication.NetHandle,System.String)">
            <summary>
            发送字符串数据到服务器
            </summary>
            <param name="customer">用户自定义的标记数据</param>
            <param name="data">字符串数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <exception cref="T:System.Net.Sockets.SocketException"></exception>
            <exception cref="T:System.ObjectDisposedException"></exception>
        </member>
        <member name="T:HslCommunication.Enthernet.AsyncStateBase">
            <summary>
            异步状态的基类
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateBase.WorkSocket">
            <summary>
            传输数据的对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AsyncStateBase.GetRemoteEndPoint">
            <summary>
            获取远程的网络地址
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Enthernet.AsyncStateSend">
            <summary>
            发送数据的异步状态
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateSend.Content">
            <summary>
            发送的数据内容
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateSend.AlreadySendLength">
            <summary>
            已经发送长度
            </summary>
        </member>
        <member name="T:HslCommunication.Enthernet.AsyncStateOne">
            <summary>
            异步多客户端网络的对象
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AsyncStateOne.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.IpAddress">
            <summary>
            IP地址
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.IpEndPoint">
            <summary>
            此连接对象连接的远程客户端
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.LoginAlias">
            <summary>
            远程对象的别名
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.HeartTime">
            <summary>
            心跳验证的时间点
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.ClientType">
            <summary>
            客户端的类型
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.ClientUniqueID">
            <summary>
            客户端唯一的标识
            </summary>
        </member>
        <member name="F:HslCommunication.Enthernet.AsyncStateOne.UdpEndPoint">
            <summary>
            UDP通信中的远程端
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.BytesHead">
            <summary>
            指令头缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.AlreadyReceivedHead">
            <summary>
            已经接收的指令头长度
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.BytesContent">
            <summary>
            数据内容缓存
            </summary>
        </member>
        <member name="P:HslCommunication.Enthernet.AsyncStateOne.AlreadyReceivedContent">
            <summary>
            已经接收的数据内容长度
            </summary>
        </member>
        <member name="M:HslCommunication.Enthernet.AsyncStateOne.Clear">
            <summary>
            清除本次的接收内容
            </summary>
        </member>
        <member name="T:HslCommunication.HslTimeOut">
            <summary>
            超时操作的类 [a class use to indicate the time-out of the connection]
            </summary>
        </member>
        <member name="M:HslCommunication.HslTimeOut.#ctor">
            <summary>
            实例化对象
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.StartTime">
            <summary>
            操作的开始时间
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.IsSuccessful">
            <summary>
            操作是否成功
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.DelayTime">
            <summary>
            延时的时间，单位毫秒
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.WorkSocket">
            <summary>
            连接超时用的Socket
            </summary>
        </member>
        <member name="P:HslCommunication.HslTimeOut.Operator">
            <summary>
            用于超时执行的方法
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.ILogNet">
            <summary>
            一个通用的日志接口
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.ILogNet.LogSaveMode">
            <summary>
            文件存储模式，1:单文件，2:根据大小，3:根据时间
            </summary>
        </member>
        <member name="E:HslCommunication.LogNet.ILogNet.BeforeSaveToFile">
            <summary>
            存储之前引发的事件，允许额外的操作
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.RecordMessage(HslCommunication.LogNet.HslMessageDegree,System.String)">
            <summary>
            自定义的消息记录
            </summary>
            <param name="degree"></param>
            <param name="text"></param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteDebug(System.String)">
            <summary>
            写入一条调试日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteDebug(System.String,System.String)">
            <summary>
            写入一条调试日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteDescrition(System.String)">
            <summary>
            写入一条解释性的信息
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteError(System.String)">
            <summary>
            写入一条错误日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteError(System.String,System.String)">
            <summary>
            写入一条错误日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteException(System.String,System.Exception)">
            <summary>
            写入一条异常信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteException(System.String,System.String,System.Exception)">
            <summary>
            写入一条异常信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">内容</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteFatal(System.String)">
            <summary>
            写入一条致命日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteFatal(System.String,System.String)">
            <summary>
            写入一条致命日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteInfo(System.String)">
            <summary>
            写入一条信息日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteInfo(System.String,System.String)">
            <summary>
            写入一条信息日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteNewLine">
            <summary>
            写入一行换行符
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteWarn(System.String)">
            <summary>
            写入一条警告日志
            </summary>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.WriteWarn(System.String,System.String)">
            <summary>
            写入一条警告日志
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">日志内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.SetMessageDegree(HslCommunication.LogNet.HslMessageDegree)">
            <summary>
            设置日志的存储等级，高于该等级的才会被存储
            </summary>
            <param name="degree"></param>
        </member>
        <member name="M:HslCommunication.LogNet.ILogNet.GetExistLogFileNames">
            <summary>
            获取已存在的日志文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetBase">
            <summary>
            日志存储类的基类，提供一些基础的服务
            </summary>    
        </member>
        <member name="F:HslCommunication.LogNet.LogNetBase.m_fileSaveLock">
            <summary>
            文件读写锁
            </summary>
        </member>
        <member name="E:HslCommunication.LogNet.LogNetBase.BeforeSaveToFile">
            <summary>
            在存储到文件的时候将会触发的事件
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.LogNetBase.LogSaveMode">
            <summary>
            日志存储模式，1:单文件，2:按大小存储，3:按时间存储
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteDebug(System.String)">
            <summary>
            写入一条调试信息
            </summary>
            <param name="text"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteDebug(System.String,System.String)">
            <summary>
            写入一条调试信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteInfo(System.String)">
            <summary>
            写入一条普通信息
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteInfo(System.String,System.String)">
            <summary>
            写入一条普通信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteWarn(System.String)">
            <summary>
            写入一条警告信息
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteWarn(System.String,System.String)">
            <summary>
            写入一条警告信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteError(System.String)">
            <summary>
            写入一条错误消息
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteError(System.String,System.String)">
            <summary>
            写入一条错误消息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteFatal(System.String)">
            <summary>
            写入一条致命错误信息
            </summary>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteFatal(System.String,System.String)">
            <summary>
            写入一条致命错误信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">文本内容</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteException(System.String,System.Exception)">
            <summary>
            写入一条异常信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="ex"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteException(System.String,System.String,System.Exception)">
            <summary>
            写入一条异常信息
            </summary>
            <param name="keyWord">关键字</param>
            <param name="text">内容</param>
            <param name="ex">异常</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.RecordMessage(HslCommunication.LogNet.HslMessageDegree,System.String)">
            <summary>
            记录一条自定义的消息
            </summary>
            <param name="degree"></param>
            <param name="text"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteDescrition(System.String)">
            <summary>
            写入一条解释性的消息，不需要带有回车键
            </summary>
            <param name="description"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.WriteNewLine">
            <summary>
            写入一条换行符
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.SetMessageDegree(HslCommunication.LogNet.HslMessageDegree)">
            <summary>
            设置日志的存储等级，高于该等级的才会被存储
            </summary>
            <param name="degree"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.GetFileSaveName">
            <summary>
            获取要存储的文件的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.CheckPathEndWithSprit(System.String)">
            <summary>
            返回检查的路径名称，将会包含反斜杠
            </summary>
            <param name="filePath"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.Dispose(System.Boolean)">
            <summary>
            释放资源
            </summary>
            <param name="disposing"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetBase.Dispose">
            <summary>
            释放资源
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.HslEventArgs">
            <summary>
            带有存储消息的事件
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslEventArgs.HslMessage">
            <summary>
            
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.GenerateMode">
            <summary>
            日志文件输出模式
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryHour">
            <summary>
            按每个小时生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryDay">
            <summary>
            按每天生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryWeek">
            <summary>
            按每个周生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryMonth">
            <summary>
            按每个月生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEverySeason">
            <summary>
            按每季度生成日志文件
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.GenerateMode.ByEveryYear">
            <summary>
            按每年生成日志文件
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.HslMessageDegree">
            <summary>
            记录消息的等级
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.None">
            <summary>
            一条消息都不记录
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.FATAL">
            <summary>
            记录致命等级及以上日志的消息
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.ERROR">
            <summary>
            记录异常等级及以上日志的消息
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.WARN">
            <summary>
            记录警告等级及以上日志的消息
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.INFO">
            <summary>
            记录信息等级及以上日志的消息
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.HslMessageDegree.DEBUG">
            <summary>
            记录调试等级及以上日志的信息
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.HslMessageItem">
            <summary>
            单个日志的记录信息
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.HslMessageItem.#ctor">
            <summary>
            默认的无参构造器
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.Id">
            <summary>
            单个记录信息的标识ID，程序重新运行时清空
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.Degree">
            <summary>
            消息的等级
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.ThreadId">
            <summary>
            线程ID
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.Text">
            <summary>
            消息文本
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.HslMessageItem.Time">
            <summary>
            消息发生的事件
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.FormLogNetView">
            <summary>
            日志查看器的窗口类，用于分析统计日志数据
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.FormLogNetView.#ctor">
            <summary>
            实例化一个日志查看器的窗口
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.FormLogNetView.components">
            <summary>
            Required designer variable.
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.FormLogNetView.Dispose(System.Boolean)">
            <summary>
            Clean up any resources being used.
            </summary>
            <param name="disposing">true if managed resources should be disposed; otherwise, false.</param>
        </member>
        <member name="M:HslCommunication.LogNet.FormLogNetView.InitializeComponent">
            <summary>
            Required method for Designer support - do not modify
            the contents of this method with the code editor.
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetAnalysisControl">
            <summary>
            一个用于日志分析的控件
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.#ctor">
            <summary>
            实例化一个控件信息
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.SetLogNetSource(System.String)">
            <summary>
            设置日志的数据源
            </summary>
            <param name="logSource">直接从日志文件中读到的数据或是来自网络的数据</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.FilterLogSource(System.String)">
            <summary>
            从现有的日志中筛选数据
            </summary>
            <param name="degree"></param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.AnalysisLogSource(System.DateTime,System.DateTime,System.String)">
            <summary>
            底层的数据分析筛选
            </summary>
            <param name="start"></param>
            <param name="end"></param>
            <param name="degree"></param>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetAnalysisControl.components">
            <summary> 
            必需的设计器变量。
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.Dispose(System.Boolean)">
            <summary> 
            清理所有正在使用的资源。
            </summary>
            <param name="disposing">如果应释放托管资源，为 true；否则为 false。</param>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetAnalysisControl.InitializeComponent">
            <summary> 
            设计器支持所需的方法 - 不要修改
            使用代码编辑器修改此方法的内容。
            </summary>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetManagment">
            <summary>
            日志类的管理器
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetManagment.LogSaveModeBySingleFile">
            <summary>
            存储文件的时候指示单文件存储
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetManagment.LogSaveModeByFileSize">
            <summary>
            存储文件的时候指示根据文件大小存储
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetManagment.LogSaveModeByDateTime">
            <summary>
            存储文件的时候指示根据日志时间来存储
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetManagment.LogFileHeadString">
            <summary>
            日志文件的头标志
            </summary>
        </member>
        <member name="P:HslCommunication.LogNet.LogNetManagment.LogNet">
            <summary>
            公开的一个静态变量，允许随意的设置
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetManagment.GetSaveStringFromException(System.String,System.Exception)">
            <summary>
            通过异常文本格式化成字符串用于保存或发送
            </summary>
            <param name="text"></param>
            <param name="ex"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetDateTime">
            <summary>
            一个日志组件，可以根据时间来区分不同的文件存储
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetDateTime.#ctor(System.String,HslCommunication.LogNet.GenerateMode)">
            <summary>
            实例化一个根据时间存储的日志组件
            </summary>
            <param name="filePath">文件存储的路径</param>
            <param name="generateMode">存储文件的间隔</param>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetDateTime.m_fileName">
            <summary>
            当前正在存储的文件名称
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetDateTime.m_filePath">
            <summary>
            文件的路径
            </summary>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetDateTime.m_generateMode">
            <summary>
            文件的存储模式，默认按照年份来存储
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetDateTime.GetFileSaveName">
            <summary>
            获取需要保存的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetDateTime.GetExistLogFileNames">
            <summary>
            获取所有的文件夹中的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetFileSize">
            <summary>
            根据文件的大小来存储日志信息
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个根据文件大小生成新文件的
            </summary>
            <param name="filePath">日志文件的保存路径</param>
            <param name="fileMaxSize">每个日志文件的最大大小，默认2M</param>
        </member>
        <member name="F:HslCommunication.LogNet.LogNetFileSize.m_fileName">
            <summary>
            当前正在存储的文件名称
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.GetFileSaveName">
            <summary>
            获取需要保存的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.GetLastAccessFileName">
            <summary>
            获取之前保存的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.GetDefaultFileName">
            <summary>
            获取一个新的默认的文件名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetFileSize.GetExistLogFileNames">
            <summary>
            返回所有的日志文件
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.LogNet.LogNetSingle">
            <summary>
            单日志文件对象
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.#ctor(System.String)">
            <summary>
            实例化一个单文件日志的对象
            </summary>
            <param name="filePath"></param>
            <exception cref="T:System.IO.FileNotFoundException"></exception>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.ClearLog">
            <summary>
            单日志文件允许清空日志内容
            </summary>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.GetAllSavedLog">
            <summary>
            获取单日志文件的所有保存记录
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.GetFileSaveName">
            <summary>
            获取存储的文件的名称
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.LogNet.LogNetSingle.GetExistLogFileNames">
            <summary>
            获取所有的日志文件数组，对于单日志文件来说就只有一个
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.OperateResult">
            <summary>
            操作结果的类，只带有成功标志和错误信息
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult.IsSuccess">
            <summary>
            指示本次访问是否成功
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult.Message">
            <summary>
            具体的错误描述
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult.ErrorCode">
            <summary>
            具体的错误代码
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult.CustomerCode">
            <summary>
            允许用户自己使用的一个额外的int数据，可以根据自身的需求进行扩充
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult.Tag">
            <summary>
            消息附带的额外信息
            </summary>
        </member>
        <member name="M:HslCommunication.OperateResult.ToMessageShowString">
            <summary>
            获取错误代号及文本描述
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.OperateResult`1">
            <summary>
            操作结果的泛型类，允许带一个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`1.Content">
            <summary>
            用户自定义的泛型数据
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`2">
            <summary>
            操作结果的泛型类，允许带两个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`2.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`2.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`3">
            <summary>
            操作结果的泛型类，允许带三个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`3.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`3.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`3.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`4">
            <summary>
            操作结果的泛型类，允许带四个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`4.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`4.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`4.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`4.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`5">
            <summary>
            操作结果的泛型类，允许带五个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`5.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`6">
            <summary>
            操作结果的泛型类，允许带六个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`6.Content6">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`7">
            <summary>
            操作结果的泛型类，允许带七个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`7.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`8">
            <summary>
            操作结果的泛型类，允许带八个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`8.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`9">
            <summary>
            操作结果的泛型类，允许带九个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
            <typeparam name="T9">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`9.Content9">
            <summary>
            用户自定义的泛型数据9
            </summary>
        </member>
        <member name="T:HslCommunication.OperateResult`10">
            <summary>
            操作结果的泛型类，允许带十个用户自定义的泛型对象，推荐使用这个类
            </summary>
            <typeparam name="T1">泛型类</typeparam>
            <typeparam name="T2">泛型类</typeparam>
            <typeparam name="T3">泛型类</typeparam>
            <typeparam name="T4">泛型类</typeparam>
            <typeparam name="T5">泛型类</typeparam>
            <typeparam name="T6">泛型类</typeparam>
            <typeparam name="T7">泛型类</typeparam>
            <typeparam name="T8">泛型类</typeparam>
            <typeparam name="T9">泛型类</typeparam>
            <typeparam name="T10">泛型类</typeparam>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content1">
            <summary>
            用户自定义的泛型数据1
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content2">
            <summary>
            用户自定义的泛型数据2
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content3">
            <summary>
            用户自定义的泛型数据3
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content4">
            <summary>
            用户自定义的泛型数据4
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content5">
            <summary>
            用户自定义的泛型数据5
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content6">
            <summary>
            用户自定义的泛型数据6
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content7">
            <summary>
            用户自定义的泛型数据7
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content8">
            <summary>
            用户自定义的泛型数据8
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content9">
            <summary>
            用户自定义的泛型数据9
            </summary>
        </member>
        <member name="P:HslCommunication.OperateResult`10.Content10">
            <summary>
            用户自定义的泛型数据10
            </summary>
        </member>
        <member name="T:HslCommunication.ModBus.IModbusMessage">
            <summary>
            Modbus tcp的消息接口
            </summary>
        </member>
        <member name="T:HslCommunication.ModBus.ModBusFunctionMask">
            <summary>
            ModBus的功能码
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusFunctionMask.ReadCoil">
            <summary>
            读线圈
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusFunctionMask.ReadDiscrete">
            <summary>
            读离散量
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusFunctionMask.ReadRegister">
            <summary>
            读保持型寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusFunctionMask.WriteOneCoil">
            <summary>
            写单个线圈
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusFunctionMask.WriteOneRegister">
            <summary>
            写单个寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusFunctionMask.WriteCoil">
            <summary>
            写多个线圈
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusFunctionMask.WriteRegister">
            <summary>
            写多个寄存器
            </summary>
        </member>
        <member name="T:HslCommunication.ModBus.ModBusTcpClient">
            <summary>
            ModBusTcp的客户端，可以方便的实现指定地点的数据读取和写入
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.#ctor(System.String,System.Int32,System.Byte)">
            <summary>
            实例化一个ModBusTcp的客户端，需要指定服务器的地址及端口，默认端口为502
            </summary>
            <param name="ipAddress">服务器的IP地址</param>
            <param name="port">服务器的端口</param>
            <param name="station">客户端的站号，可以用来标识不同的客户端，默认255</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.GetDescriptionByErrorCode(System.Byte)">
            <summary>
            通过错误码来获取到对应的文本消息
            </summary>
            <param name="code"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.BytesTransform(HslCommunication.OperateResult{System.Byte[]})">
            <summary>
            单数据读取的转换方法
            </summary>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.BytesTransform(System.Byte[],System.Int32)">
            <summary>
            特殊的高低位置换
            </summary>
            <remarks>
                             ___________________
                            |                   |
            4字节       byte[0]   byte[1]   byte[2]   byte[3]
                                     |___________________|
            
            </remarks>
            <param name="data">字节数据</param>
            <param name="length"></param>
            <returns>置换后的结果</returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReceiveResponse(System.Net.Sockets.Socket,System.Byte[]@,HslCommunication.OperateResult)">
            <summary>
            接收服务器的反馈数据的规则
            </summary>
            <param name="socket"></param>
            <param name="response"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadRegister``1(System.UInt16)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister``1(System.UInt16,``0)">
            <summary>
            写入自定义的数据类型到寄存器去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteOneCoil(System.UInt16,System.Boolean)">
            <summary>
            写单个线圈，对应的功能码0x05
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">False还是True，代表线圈断和通</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteOneRegister(System.UInt16,System.Int16)">
            <summary>
            写入一个寄存器的数据，对应的功能码0x06
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">有符号的数据值</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteOneRegister(System.UInt16,System.UInt16)">
            <summary>
            写入一个寄存器的数据，对应的功能码0x06
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">无符号的数据值</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteOneRegister(System.UInt16,System.Byte,System.Byte)">
            <summary>
            写入一个寄存器的数据，对应的功能码0x06
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="High">高位的数据</param>
            <param name="Low">地位的数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteCoil(System.UInt16,System.Boolean[])">
            <summary>
            写线圈数组，线圈数组不能大于2040个，对应的功能码0x0F
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">线圈的数组</param>
            <returns></returns>
            <exception cref="T:System.ArgumentOutOfRangeException"></exception>
            <exception cref="T:System.ArgumentNullException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Byte[])">
            <summary>
            写多个寄存器，寄存器的个数不能大于128个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">字节数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.String)">
            <summary>
            写ASCII字符串到寄存器，寄存器的个数不能大于128个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">ASCII编码的字符串</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Int16[])">
            <summary>
            写多个寄存器，寄存器的个数不能大于128个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">short数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Int16)">
            <summary>
            写short到寄存器，寄存器的个数不能大于128个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">short数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.UInt16[])">
            <summary>
            写多个寄存器，寄存器的个数不能大于128个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">ushort数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.UInt16)">
            <summary>
            写ushort到寄存器，寄存器的个数不能大于128个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">ushort数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Int32[])">
            <summary>
            写多个寄存器的int数组，寄存器的个数不能大于63个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">int数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Int32)">
            <summary>
            写int到寄存器，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">int数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.UInt32[])">
            <summary>
            写多个寄存器的uint数组，寄存器的个数不能大于63个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">uint数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.UInt32)">
            <summary>
            写uint到寄存器，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">uint数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Single[])">
            <summary>
            写多个寄存器的float数组，数组的长度不能大于63个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">float数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Single)">
            <summary>
            写float到寄存器，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">float数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Double[])">
            <summary>
            写多个寄存器的double数组，数组的长度不能大于31，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">double数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Double)">
            <summary>
            写double到寄存器，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">double数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Int64[])">
            <summary>
            写多个寄存器的long数组，数组最大为31个长度，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">long数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.Int64)">
            <summary>
            写long到寄存器，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">long数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.UInt64[])">
            <summary>
            写多个寄存器的ulong数组，寄存器的个数不能大于31个，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">ulong数组</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.WriteRegister(System.UInt16,System.UInt64)">
            <summary>
            写ulong到寄存器，对应功能码0x10
            </summary>
            <param name="address">写入的起始地址</param>
            <param name="value">ulong数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadModBusBase(HslCommunication.ModBus.ModBusFunctionMask,System.UInt16,System.UInt16)">
            <summary>
            读取服务器的数据，需要指定不同的功能码
            </summary>
            <param name="function"></param>
            <param name="address"></param>
            <param name="length"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadCoil(System.UInt16,System.UInt16)">
            <summary>
            读取服务器的线圈，对应功能码0x01
            </summary>
            <param name="address">读取的起始地址</param>
            <param name="length">读取的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadDiscrete(System.UInt16,System.UInt16)">
            <summary>
            读取服务器的离散量，对应的功能码0x02
            </summary>
            <param name="address">读取的起始地址</param>
            <param name="length">读取的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadRegister(System.UInt16,System.UInt16)">
            <summary>
            读取服务器的寄存器，对应的功能码0x03
            </summary>
            <param name="address">读取的起始地址</param>
            <param name="length">读取的数据长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadBoolCoil(System.UInt16)">
            <summary>
            读取指定地址的线圈值，并转化成bool
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadShortRegister(System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成short
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadShortRegister(System.UInt16,System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成short数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的short数组的长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadUShortRegister(System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成ushort
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadUShortRegister(System.UInt16,System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成ushort数组
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的ushort数组的长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadIntRegister(System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成int
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadUIntRegister(System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成uint
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadFloatRegister(System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成float
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadLongRegister(System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成long
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadULongRegister(System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成ulong
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadDoubleRegister(System.UInt16)">
            <summary>
            读取指定地址的寄存器，并转化成double
            </summary>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ReadStringRegister(System.UInt16,System.UInt16)">
            <summary>
            读取指定地址的String数据，编码为ASCII
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <param name="length">字符串长度，返回字符串为2倍长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.Equals(System.Object)">
            <summary>
            判断实例是否为同一个
            </summary>
            <param name="obj"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.GetHashCode">
            <summary>
            用作特定类型的哈希函数
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpClient.ToString">
            <summary>
            获取文本表示的形式
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.ModBus.ModBusTcpServer">
            <summary>
            ModBus Tcp协议的服务器端，支持所有发送到此端口的数据，并对所有的数据提供一个中心处理方法，读取该服务器数据将返回无效数据
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.#ctor">
            <summary>
            实例化一个Modbus Tcp的服务器，支持数据读写操作
            </summary>
        </member>
        <member name="E:HslCommunication.ModBus.ModBusTcpServer.OnDataReceived">
            <summary>
            接收到数据的时候就行触发
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadCoil(System.UInt16)">
            <summary>
            读取地址的线圈的通断情况
            </summary>
            <param name="address">起始地址</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadCoil(System.UInt16,System.UInt16)">
            <summary>
            批量读取地址的线圈的通断情况
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取长度</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteCoil(System.UInt16,System.Boolean)">
            <summary>
            写入线圈的通断值
            </summary>
            <param name="address">起始地址</param>
            <param name="data">是否通断</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteCoil(System.UInt16,System.Boolean[])">
            <summary>
            写入线圈数组的通断值
            </summary>
            <param name="address">起始地址</param>
            <param name="data">是否通断</param>
            <returns><c>True</c>或是<c>False</c></returns>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadRegister(System.UInt16,System.UInt16)">
            <summary>
            读取自定义的寄存器的值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数据长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadShortRegister(System.UInt16)">
            <summary>
            读取一个寄存器的值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadShortRegister(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器的值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取的short长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadUShortRegister(System.UInt16)">
            <summary>
            读取一个寄存器的值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadUShortRegister(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器的值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">读取长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadIntRegister(System.UInt16)">
            <summary>
            读取两个寄存器组成的int值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadIntRegister(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的int值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadUIntRegister(System.UInt16)">
            <summary>
            读取两个寄存器组成的uint值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadUIntRegister(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的uint值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadFloatRegister(System.UInt16)">
            <summary>
            读取两个寄存器组成的float值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadFloatRegister(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的float值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadLongRegister(System.UInt16)">
            <summary>
            读取四个寄存器组成的long值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadLongRegister(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的long值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadULongRegister(System.UInt16)">
            <summary>
            读取四个寄存器组成的ulong值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadULongRegister(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的ulong值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadDoubleRegister(System.UInt16)">
            <summary>
            读取四个寄存器组成的double值
            </summary>
            <param name="address">起始地址</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadDoubleRegister(System.UInt16,System.UInt16)">
            <summary>
            批量读取寄存器组成的double值
            </summary>
            <param name="address">起始地址</param>
            <param name="length">数组长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ReadStringRegister(System.UInt16,System.UInt16)">
            <summary>
            读取ASCII字符串，长度为寄存器数量，最终的字符串长度为这个值的2倍
            </summary>
            <param name="address">起始地址</param>
            <param name="length">寄存器长度</param>
            <exception cref="T:System.IndexOutOfRangeException"></exception>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Byte,System.Byte)">
            <summary>
            写入寄存器数据，指定字节数据
            </summary>
            <param name="address">起始地址</param>
            <param name="high">高位数据</param>
            <param name="low">地位数据</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Int16)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Int16[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.UInt16)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.UInt16[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Int32)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Int32[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.UInt32)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.UInt32[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Single)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Single[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Int64)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Int64[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.UInt64)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.UInt64[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Double)">
            <summary>
            往Modbus服务器中的指定寄存器写入数据
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.WriteRegister(System.UInt16,System.Double[])">
            <summary>
            往Modbus服务器中的指定寄存器写入数组
            </summary>
            <param name="address">起始地址</param>
            <param name="data">数据值</param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.ThreadPoolLogin(System.Object)">
            <summary>
            当接收到了新的请求的时候执行的操作
            </summary>
            <param name="obj"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.AddSubcription(HslCommunication.ModBus.ModBusMonitorAddress)">
            <summary>
            新增一个数据监视的任务
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.RemoveSubcrption(HslCommunication.ModBus.ModBusMonitorAddress)">
            <summary>
            移除一个数据监视的任务
            </summary>
            <param name="monitor"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusTcpServer.OnRegisterBeforWrite(System.UInt16,System.Int16,System.Int16)">
            <summary>
            在数据变更后，进行触发是否产生订阅
            </summary>
            <param name="address"></param>
            <param name="before"></param>
            <param name="after"></param>
        </member>
        <member name="T:HslCommunication.ModBus.ModBusMonitorAddress">
            <summary>
            服务器端提供的数据监视服务
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModBusMonitorAddress.Address">
            <summary>
            本次数据监视的地址
            </summary>
        </member>
        <member name="E:HslCommunication.ModBus.ModBusMonitorAddress.OnWrite">
            <summary>
            数据写入时触发的事件
            </summary>
        </member>
        <member name="E:HslCommunication.ModBus.ModBusMonitorAddress.OnChange">
            <summary>
            数据改变时触发的事件
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusMonitorAddress.SetValue(System.Int16)">
            <summary>
            强制设置触发事件
            </summary>
            <param name="value"></param>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusMonitorAddress.SetChangeValue(System.Int16,System.Int16)">
            <summary>
            强制设置触发值变更事件
            </summary>
            <param name="before">变更前的值</param>
            <param name="after">变更后的值</param>
        </member>
        <member name="T:HslCommunication.ModBus.ModBusState">
            <summary>
            ModBus的异步状态信息
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusState.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="P:HslCommunication.ModBus.ModBusState.ConnectTime">
            <summary>
            连接的时间
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.WorkSocket">
            <summary>
            工作套接字
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.HeadByte">
            <summary>
            消息头的缓存
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.HeadByteReceivedLength">
            <summary>
            消息头的接收长度
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.Content">
            <summary>
            内容数据缓存
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.ContentReceivedLength">
            <summary>
            内容数据接收长度
            </summary>
        </member>
        <member name="F:HslCommunication.ModBus.ModBusState.hybirdLock">
            <summary>
            回发信息的同步锁
            </summary>
        </member>
        <member name="M:HslCommunication.ModBus.ModBusState.Clear">
            <summary>
            清除原先的接收状态
            </summary>
        </member>
        <member name="T:HslCommunication.IDataTransfer">
            <summary>
            用于PLC通讯及ModBus自定义数据类型的读写操作
            </summary>
        </member>
        <member name="P:HslCommunication.IDataTransfer.ReadCount">
            <summary>
            读取的数据长度，对于西门子，等同于字节数，对于三菱和Modbus为字节数的一半
            </summary>
        </member>
        <member name="M:HslCommunication.IDataTransfer.ParseSource(System.Byte[])">
            <summary>
            从字节数组进行解析实际的对象
            </summary>
            <param name="Content"></param>
        </member>
        <member name="M:HslCommunication.IDataTransfer.ToSource">
            <summary>
            将对象生成字符源，写入PLC中
            </summary>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Profinet.MelsecNetBase">
            <summary>
            三菱网络类基类，提供三菱基础数据和方法
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.MelsecNetBase.NetworkNumber">
            <summary>
            获取或设置PLC所在的网络号，一般都为0
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.MelsecNetBase.NetworkStationNumber">
            <summary>
            获取或设置PLC所在网络的站号，一般都为0
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.ReceiveBytesTranslate(System.Byte[])">
            <summary>
            当读取位数据时，进行相对的转化
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.GetLengthFromPlcType(HslCommunication.Profinet.MelsecDataType,System.Int32)">
            <summary>
            根据读取的数据类型和长度返回最终生成的数据
            </summary>
            <param name="type">数据类型</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.BoolTranslateBytes(System.Boolean[])">
            <summary>
            将BOOL变量数组转化成可写入PLC的字节数据
            </summary>
            <param name="data">bool数组</param>
            <returns>可写入PLC的字节数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.SingularTurnEven(System.Byte[])">
            <summary>
            根据字节数据进行补齐偶数位
            </summary>
            <param name="bytes">数据</param>
            <returns>补齐后的数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.GetReadCommand(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt16)">
            <summary>
            根据类型地址长度确认需要读取的指令头
            </summary>
            <param name="type">类型</param>
            <param name="address">起始地址</param>
            <param name="length">长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetBase.GetWriteCommand(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Byte[],System.Int32)">
            <summary>
            根据类型地址以及需要写入的数据来生成指令头
            </summary>
            <param name="type"></param>
            <param name="address"></param>
            <param name="data"></param>
            <param name="length">指定长度</param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Profinet.MelsecNet">
            <summary>
            数据访问类，用于计算机和三菱PLC的以太网模块通讯的类
            通讯协议为基于以太网的QnA兼容3E帧协议
            只支持同步访问方式，必须先配置网络参数
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.#ctor">
            <summary>
            实例化一个连接对象
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.AnalysisAddress(System.String,HslCommunication.Profinet.MelsecDataType@,System.UInt16@,HslCommunication.OperateResult)">
            <summary>
            解析数据地址
            </summary>
            <param name="address">数据地址</param>
            <param name="type">类型</param>
            <param name="startAddress">其实地址</param>
            <param name="result">结果数据对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReceiveResponse(System.Net.Sockets.Socket,System.Byte[]@,HslCommunication.OperateResult)">
            <summary>
            接收来自服务器的响应
            </summary>
            <param name="socket"></param>
            <param name="response"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadFromPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="type">想要读取的数据类型</param>
            <param name="address">读取数据的起始地址</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns>带数据头的字节数组</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadFromPLC(System.String,System.UInt16)">
            <summary>
            从三菱PLC中读取想要的数据，返回读取结果
            </summary>
            <param name="address">字符串表示形式，X100，Y100，M100，D100，W100，L100</param>
            <param name="length">读取的数据长度，字最大值960，位最大值7168</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">原始的字节数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Byte[])">
            <summary>
            向PLC写入数据，数据格式为原始的字节类型
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">原始的字节数据</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadFromPLC``1(System.String)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到PLC去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadBoolFromPLC(System.String)">
            <summary>
            读取指定地址的bool数据，针对数据类型X,Y,M,L,B
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadShortFromPLC(System.String)">
            <summary>
            读取指定地址的short数据，针对数据类型W，D，R
            </summary>
            <param name="address"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadUShortFromPLC(System.String)">
            <summary>
            读取指定地址的short数据，针对数据类型W，D，R
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadIntFromPLC(System.String)">
            <summary>
            读取指定地址的int数据，针对数据类型W，D，R
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadUIntFromPLC(System.String)">
            <summary>
            读取指定地址的uint数据，针对数据类型W，D，R
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadFloatFromPLC(System.String)">
            <summary>
            读取指定地址的float数据，针对数据类型W，D，R
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadLongFromPLC(System.String)">
            <summary>
            读取指定地址的long数据，针对数据类型W，D，R
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadULongFromPLC(System.String)">
            <summary>
            读取指定地址的ulong数据，针对数据类型W，D，R
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadDoubleFromPLC(System.String)">
            <summary>
            读取指定地址的double数据，针对数据类型W，D，R
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.ReadStringFromPLC(System.String,System.UInt16)">
            <summary>
            读取指定地址的String数据，编码为ASCII，针对数据类型W，D，R
            </summary>
            <param name="address">起始地址的字符串形式</param>
            <param name="length">字符串长度，返回字符串为2倍长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteAsciiStringIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.String)">
            <summary>
            向PLC写入ASCII编码字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">字符串数据信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteAsciiStringIntoPLC(System.String,System.String)">
            <summary>
            向PLC写入ASCII编码字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">字符串数据信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteAsciiStringIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.String,System.Int32)">
            <summary>
            向PLC写入指定长度ASCII编码字符串数据，超过截断，不够补0，针对W,D的方式，数据为字符串
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">字符串数据信息</param>
            <param name="length">指定写入长度，必须为偶数</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteAsciiStringIntoPLC(System.String,System.String,System.Int32)">
            <summary>
            向PLC写入指定长度ASCII编码字符串数据，超过截断，不够补0，针对W,D的方式，数据为字符串
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">字符串数据信息</param>
            <param name="length">指定写入长度，必须为偶数</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteUnicodeStringIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.String)">
            <summary>
            使用Unicode编码向PLC写入字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">字符串数据信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteUnicodeStringIntoPLC(System.String,System.String)">
            <summary>
            使用Unicode编码向PLC写入字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">字符串数据信息</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteUnicodeStringIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.String,System.Int32)">
            <summary>
            使用Unicode编码向PLC写入指定长度的字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">字符串数据信息</param>
            <param name="length">指定字符串的长度</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteUnicodeStringIntoPLC(System.String,System.String,System.Int32)">
            <summary>
            使用Unicode编码向PLC写入指定长度的字符串数据，针对W,D的方式，数据为字符串
            </summary>
            <param name="address">初始地址的字符串</param>
            <param name="data">字符串数据信息</param>
            <param name="length">指定字符串的长度</param>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Boolean[])">
            <summary>
            向PLC写入数据，针对X,Y,M,L,B的方式，数据为通断的信号
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">通断信号的数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Boolean[])">
            <summary>
            向PLC写入数据，针对X,Y,M,L,B的方式，数据为通断的信号
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">通断信号的数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Boolean)">
            <summary>
            向PLC写入数据，针对X,Y,M,L,B的方式，数据为通断的信号
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">通断信号的数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt16[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为无符号的ushort数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">无符号的ushort数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.UInt16[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为无符号的ushort数组
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">无符号的ushort数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.UInt16)">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为无符号的ushort数据
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">无符号的ushort数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Int16[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为有符号的short数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">有符号的short数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Int16[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为有符号的short数组
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">有符号的short数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Int16)">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为有符号的short数据
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">有符号的short数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Int32[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为int数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Int32[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为int数组
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Int32)">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为int数据
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt32[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为uint数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.UInt32[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为uint数组
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.UInt32)">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为uint数据
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Single[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为float数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Single[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为float数组
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Single)">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为float数据
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">float数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Int64[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为long数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Int64[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为long数组
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Int64)">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为long数据
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt64[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为long数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.UInt64[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为long数组
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.UInt64)">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为long数据
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(HslCommunication.Profinet.MelsecDataType,System.UInt16,System.Double[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为double数组
            </summary>
            <param name="type">写入的数据类型</param>
            <param name="address">初始地址</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Double[])">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为double数组
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNet.WriteIntoPLC(System.String,System.Double)">
            <summary>
            向PLC写入数据，针对D和W的方式，数据格式为double数据
            </summary>
            <param name="address">初始地址的字符串表示形式</param>
            <param name="data">double数组</param>
            <exception cref="T:System.ArgumentNullException"></exception>
            <returns>结果</returns>
        </member>
        <member name="T:HslCommunication.Profinet.MelsecNetMultiAsync">
            <summary>
            异步的多PLC请求类，可以同时并发的向多个PLC发起请求，该类使用非阻塞的高性能方式实现，需要好好测试
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetMultiAsync.#ctor(System.Byte,System.Byte,HslCommunication.Profinet.MelsecDataType,System.UInt16,System.UInt16,System.Int32,System.Int32,System.Net.IPAddress[],System.Int32,System.Int32)">
            <summary>
            实例化一个多PLC请求的对象
            </summary>
            <param name="networkNumber">要求所有网络号一致</param>
            <param name="networkStationNumber">要求所有站号一致</param>
            <param name="type">要求所有读取类型一致</param>
            <param name="address">要求所有起始地址一致</param>
            <param name="length">要求所有读取数据长度一致</param>
            <param name="timeout">连接PLC过程中的超时时间</param>
            <param name="readCycle">每次请求访问的间隔时间</param>
            <param name="allAddress">所有等待访问的PLC的IP地址</param>
            <param name="portMain">访问PLC时的主端口</param>
            <param name="portBackup">访问PLC时的备用端口</param>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.Timeout">
            <summary>
            超时时间
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.ReadCycle">
            <summary>
            访问周期
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.ConnectStatus">
            <summary>
            系统的连接状态，0未连接，1连接中
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.BytesResult">
            <summary>
            用于存储结果的字节数组
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecNetMultiAsync.EveryMachineLength">
            <summary>
            每台设备的长度
            </summary>
        </member>
        <member name="E:HslCommunication.Profinet.MelsecNetMultiAsync.OnReceivedData">
            <summary>
            接收到所有的PLC数据时候触发
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecNetMultiAsync.ThreadDealWithTimeout">
            <summary>
            维护超时连接的线程方法
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.MelsecDataType">
            <summary>
            三菱PLC的数据类型，此处只包含了几个常用的类型
            X,Y,M,D,W,L
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.MelsecDataType.#ctor(System.Byte,System.Byte)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code">数据类型的代号</param>
            <param name="type">0或1，默认为0</param>
        </member>
        <member name="P:HslCommunication.Profinet.MelsecDataType.DataCode">
            <summary>
            类型的代号值
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.MelsecDataType.DataType">
            <summary>
            数据的类型，0代表按字，1代表按位
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.X">
            <summary>
            X输入寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.Y">
            <summary>
            Y输出寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.M">
            <summary>
            M中间寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.D">
            <summary>
            D数据寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.W">
            <summary>
            W链接寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.L">
            <summary>
            L锁存继电器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.F">
            <summary>
            F报警器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.V">
            <summary>
            V边沿继电器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.B">
            <summary>
            B链接继电器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.R">
            <summary>
            R文件寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.MelsecDataType.S">
            <summary>
            S步进继电器
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.OmronNet">
            <summary>
            欧姆龙Plc的通讯类，基于Fins Tcp协议通讯
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.OmronNet.#ctor(System.String,System.Int32)">
            <summary>
            实例化一个新的对象，需要指定PLC的ip地址和端口号
            </summary>
            <param name="ipAddress"></param>
            <param name="port"></param>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.Index">
            <summary>
            在数组中的位置
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PortMain">
            <summary>
            主要访问的PLC端口
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PortBackup">
            <summary>
            备用访问的PLC端口
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PlcIpAddress">
            <summary>
            PLC的IP地址
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.WorkSocket">
            <summary>
            用于工作的套接字对象
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.IsConnect">
            <summary>
            连接是否成功
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PlcDataHead">
            <summary>
            头子节
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.LengthDataHead">
            <summary>
            头子节接收长度
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.PlcDataContent">
            <summary>
            接收的PLC实际数据
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcStateOne.LengthDataContent">
            <summary>
            实际数据的接收长度
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.PlcNetBase">
            <summary>
            以太网模块访问的基类
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.#ctor">
            <summary>
            实例化一个对象
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetIPEndPoint">
            <summary>
            获取服务器的连接
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetPort">
            <summary>
            获取访问的端口号
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.ChangePort">
            <summary>
            更换端口号
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcNetBase.PortRead">
            <summary>
            读取数据的端口，默认为1000
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcNetBase.PortReadBackup">
            <summary>
            读取数据的备用端口，默认为-1(不切换)，当一次请求失败时，将会自动切换端口
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcNetBase.PortWrite">
            <summary>
            写入数据端口，默认为1001
            </summary>
        </member>
        <member name="P:HslCommunication.Profinet.PlcNetBase.PLCIpAddress">
            <summary>
            远程PLC的IP地址，默认为192.168.0.2
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.AddVoidHead(System.Byte[],System.Int32)">
            <summary>
            追加字节数据的头部空字节
            </summary>
            <param name="bytes">实际数据</param>
            <param name="length">追加的长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.ManageBytesLength(System.Byte[],System.Int32)">
            <summary>
            控制字节长度，超出选择截断，不够补零
            </summary>
            <param name="bytes">字节数据</param>
            <param name="length">最终需要的目标长度</param>
            <returns>处理后的数据</returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetArrayFromBytes(System.Byte[])">
            <summary>
            根据底层的数据情况返回转换后的short数组
            </summary>
            <param name="bytes">真实的数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetIntArrayFromBytes(System.Byte[])">
            <summary>
            根据底层的数据情况返回转换后的int数组
            </summary>
            <param name="bytes">真实的数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.PlcNetBase.GetShortFromBytes(System.Byte[],System.Int32)">
            <summary>
            从指定的字节数据中提取指定位置的short值
            </summary>
            <param name="content">读取的字节数组</param>
            <param name="index">索引</param>
            <returns>实际值</returns>
        </member>
        <member name="T:HslCommunication.Profinet.SiemensNet">
            <summary>
            数据访问类，用于计算机和西门子PLC的以太网模块通讯的类
            通讯协议为基于以太网的FETCH/WRITE协议
            想要访问成功，必须先配置PLC的网络
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.ReadFromPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.UInt16)">
            <summary>
            从西门子PLC中读取想要的数据，返回结果类说明
            </summary>
            <param name="type">想要读取的数据类型</param>
            <param name="address">读取数据的起始地址</param>
            <param name="lengh">读取的数据长度</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteAsciiStringIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为ASCII
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteAsciiStringIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteUnicodeStringIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为Unicode
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteUnicodeStringIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.Int16[])">
            <summary>
            向PLC中写入short数据，返回值说明
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <exception cref="T:System.ArgumentNullException">写入的数据不能为空</exception>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensNet.WriteIntoPLC(HslCommunication.Profinet.SiemensDataType,System.UInt16,System.Byte[])">
            <summary>
            向PLC中写入数据，返回值说明
            </summary>
            <param name="type">要写入的数据类型</param>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <exception cref="T:System.ArgumentNullException">写入的数据不能为空</exception>
            <returns>返回写入结果</returns>
        </member>
        <member name="T:HslCommunication.Profinet.SiemensDataType">
            <summary>
            西门子的数据类型
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensDataType.#ctor(System.Byte)">
            <summary>
            如果您清楚类型代号，可以根据值进行扩展
            </summary>
            <param name="code"></param>
        </member>
        <member name="P:HslCommunication.Profinet.SiemensDataType.DataCode">
            <summary>
            类型的代号值
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensDataType.M">
            <summary>
            M寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensDataType.I">
            <summary>
            I寄存器
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensDataType.Q">
            <summary>
            Q寄存器
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.SiemensPLCS">
            <summary>
            西门子的PLC类型，目前支持的访问类型
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensPLCS.S1200">
            <summary>
            1200系列
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensPLCS.S300">
            <summary>
            300系列
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensPLCS.S1500">
            <summary>
            1500系列PLC
            </summary>
        </member>
        <member name="F:HslCommunication.Profinet.SiemensPLCS.S200Smart">
            <summary>
            200的smart系列
            </summary>
        </member>
        <member name="T:HslCommunication.Profinet.SiemensTcpNet">
            <summary>
            一个直接使用Tcp协议连接西门子PLC的类，只需要在plc侧配置IP即可，该类在西门子1200上经过测试，1500暂时不支持
            </summary>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.#ctor(HslCommunication.Profinet.SiemensPLCS)">
            <summary>
            实例化一个数据通信的对象，需要指定访问哪种Plc
            </summary>
            <param name="siemens"></param>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.InitilizationOnConnect(System.Net.Sockets.Socket,HslCommunication.OperateResult)">
            <summary>
            连接操作
            </summary>
            <param name="socket"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReceiveResponse(System.Net.Sockets.Socket,System.Byte[]@,HslCommunication.OperateResult)">
            <summary>
            接收服务器的时候的数据反馈
            </summary>
            <param name="socket"></param>
            <param name="response"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.BuildReadCommand(System.String[],System.UInt16[],System.Byte[]@,HslCommunication.OperateResult)">
            <summary>
            生成一个读取字数据指令头的通用方法
            </summary>
            <param name="address"></param>
            <param name="count"></param>
            <param name="command"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.BuildBitReadCommand(System.String,System.Byte[]@,HslCommunication.OperateResult)">
            <summary>
            生成一个位读取数据指令头的通用方法
            </summary>
            <param name="address"></param>
            <param name="command"></param>
            <param name="result"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.AnalysisAddress(System.String,System.Byte@,System.Int32@,System.UInt16@,HslCommunication.OperateResult)">
            <summary>
            解析数据地址
            </summary>
            <param name="address">数据地址</param>
            <param name="type">类型</param>
            <param name="startAddress">其实地址</param>
            <param name="dbAddress">DB块地址</param>
            <param name="result">结果数据对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadFromPLC``1(System.String)">
            <summary>
            读取自定义的数据类型，只要规定了写入和解析规则
            </summary>
            <typeparam name="T">类型名称</typeparam>
            <param name="address">起始地址</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC``1(System.String,``0)">
            <summary>
            写入自定义的数据类型到PLC去，只要规定了生成字节的方法即可
            </summary>
            <typeparam name="T">自定义类型</typeparam>
            <param name="address">起始地址</param>
            <param name="data">实例对象</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadOrderNumber">
            <summary>
            从PLC读取订货号信息
            </summary>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadFromPLC(System.String,System.UInt16)">
            <summary>
            从PLC读取数据，地址格式为I100，Q100，DB20.100，M100，以字节为单位
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="count">读取的数量，以字节为单位</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadBitFromPLC(System.String)">
            <summary>
            从PLC读取数据，地址格式为I100，Q100，DB20.100，M100，以位为单位
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadFromPLC(System.String[],System.UInt16[])">
            <summary>
            一次性从PLC获取所有的数据，按照先后顺序返回一个统一的Buffer，需要按照顺序处理，两个数组长度必须一致
            </summary>
            <param name="address">起始地址数组</param>
            <param name="count">数据长度数组</param>
            <returns></returns>
            <exception cref="T:System.NullReferenceException"></exception>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadBoolFromPLC(System.String)">
            <summary>
            读取指定地址的bool数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadByteFromPLC(System.String)">
            <summary>
            读取指定地址的byte数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadShortFromPLC(System.String)">
            <summary>
            读取指定地址的short数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadUShortFromPLC(System.String)">
            <summary>
            读取指定地址的ushort数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadIntFromPLC(System.String)">
            <summary>
            读取指定地址的int数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadUIntFromPLC(System.String)">
            <summary>
            读取指定地址的uint数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadFloatFromPLC(System.String)">
            <summary>
            读取指定地址的float数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadLongFromPLC(System.String)">
            <summary>
            读取指定地址的long数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadULongFromPLC(System.String)">
            <summary>
            读取指定地址的ulong数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadDoubleFromPLC(System.String)">
            <summary>
            读取指定地址的double数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.ReadStringFromPLC(System.String,System.UInt16)">
            <summary>
            读取地址地址的String数据
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="length">字符串长度</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Byte[])">
            <summary>
            将数据写入到PLC数据，地址格式为I100，Q100，DB20.100，M100，以字节为单位
            </summary>
            <param name="address">起始地址，格式为I100，M100，Q100，DB20.100</param>
            <param name="data">写入的数据，长度根据data的长度来指示</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Boolean)">
            <summary>
            写入PLC的一个位，例如"M100.6"，"I100.7"，"Q100.0"，"DB20.100.0"，如果只写了"M100"默认为"M100.0
            </summary>
            <param name="address"></param>
            <param name="data"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteAsciiStringIntoPLC(System.String,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteAsciiStringIntoPLC(System.String,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为ASCII
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteUnicodeStringIntoPLC(System.String,System.String)">
            <summary>
            向PLC中写入字符串，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteUnicodeStringIntoPLC(System.String,System.String,System.Int32)">
            <summary>
            向PLC中写入指定长度的字符串,超出截断，不够补0，编码格式为Unicode
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <param name="length">指定的字符串长度，必须大于0</param>
            <returns>返回读取结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Boolean[])">
            <summary>
            向PLC中写入bool数组，返回值说明，比如你写入M100,那么data[0]对应M100.0
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据，长度为8的倍数</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Byte)">
            <summary>
            向PLC中写入byte数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Int16[])">
            <summary>
            向PLC中写入short数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Int16)">
            <summary>
            向PLC中写入short数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.UInt16[])">
            <summary>
            向PLC中写入ushort数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.UInt16)">
            <summary>
            向PLC中写入ushort数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Int32[])">
            <summary>
            向PLC中写入int数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Int32)">
            <summary>
            向PLC中写入int数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.UInt32[])">
            <summary>
            向PLC中写入uint数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.UInt32)">
            <summary>
            向PLC中写入uint数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Single[])">
            <summary>
            向PLC中写入float数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Single)">
            <summary>
            向PLC中写入float数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Int64[])">
            <summary>
            向PLC中写入long数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Int64)">
            <summary>
            向PLC中写入long数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.UInt64[])">
            <summary>
            向PLC中写入ulong数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.UInt64)">
            <summary>
            向PLC中写入ulong数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Double[])">
            <summary>
            向PLC中写入double数组，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.WriteIntoPLC(System.String,System.Double)">
            <summary>
            向PLC中写入double数据，返回值说明
            </summary>
            <param name="address">要写入的数据地址</param>
            <param name="data">要写入的实际数据</param>
            <returns>返回写入结果</returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.GetArrayFromBytes(System.Byte[])">
            <summary>
            从返回的西门子数组中获取short数组数据，已经内置高地位转换
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.GetIntArrayFromBytes(System.Byte[])">
            <summary>
            从返回的西门子数组中获取int数组数据，已经内置高地位转换
            </summary>
            <param name="bytes"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.GetShortFromBytes(System.Byte[],System.Int32)">
            <summary>
            根据索引位转换获取short数据
            </summary>
            <param name="content"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.GetFloatFromBytes(System.Byte[],System.Int32)">
            <summary>
            根据索引位转换获取float数据
            </summary>
            <param name="content"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="M:HslCommunication.Profinet.SiemensTcpNet.GetIntFromBytes(System.Byte[],System.Int32)">
            <summary>
            根据索引位转换获取int数据
            </summary>
            <param name="content"></param>
            <param name="index"></param>
            <returns></returns>
        </member>
        <member name="T:HslCommunication.Properties.Resources">
            <summary>
              一个强类型的资源类，用于查找本地化的字符串等。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ResourceManager">
            <summary>
              返回此类使用的缓存的 ResourceManager 实例。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Culture">
            <summary>
              使用此强类型资源类，为所有资源查找
              重写当前线程的 CurrentUICulture 属性。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.abstr1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.abstr11">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Activity_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.AddressViewer">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.asset_progressBar_24x24_on">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.asset_progressBar_24x24_on1">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.AudioRecording">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.brackets_Square_16xMD">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Class_489">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ClassIcon">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Cloud_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Copy_6524">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Delegate_8339">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.docview_xaml_on_16x16">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Enum_582">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Event_594">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Event_594_exp">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.glasses_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.grid_Data_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.lightningBolt_16xLG">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.ListView_687">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Method_636">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Module_648">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.PropertyIcon">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.qrcode_for_gh_319218678954_258">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Soundfile_461">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Structure_507">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.TabControl_707">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Table_748">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Tag_7213">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.Textfile_818_16x">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.TreeView_713">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.usbcontroller">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.UseCaseDiagramFile_usecasediagram_13447_16x">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.VirtualMachine">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.WebFormTemplate_11274_16x_color">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="P:HslCommunication.Properties.Resources.WindowsForm_817_16x">
            <summary>
              查找 System.Drawing.Bitmap 类型的本地化资源。
            </summary>
        </member>
        <member name="M:HslCommunication.HslSecurity.ByteEncrypt(System.Byte[])">
            <summary>
            加密方法，只对当前的程序集开放
            </summary>
            <param name="enBytes">等待加密的数据</param>
            <returns>加密后的数据</returns>
        </member>
        <member name="M:HslCommunication.HslSecurity.ByteDecrypt(System.Byte[])">
            <summary>
            解密方法，只对当前的程序集开放
            </summary>
            <param name="deBytes">等待解密的数据</param>
            <returns>解密后的数据</returns>
        </member>
        <member name="T:HslCommunication.Serial.SoftCRC16">
            <summary>
            用于CRC16验证的类，提供了标准的验证方法
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SoftCRC16.CheckCRC16(System.Byte[])">
            <summary>
            来校验对应的接收数据的CRC校验码，默认多项式码为0xA001
            </summary>
            <param name="data">需要校验的数据，带CRC校验码</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:HslCommunication.Serial.SoftCRC16.CheckCRC16(System.Byte[],System.Byte,System.Byte)">
            <summary>
            指定多项式码来校验对应的接收数据的CRC校验码
            </summary>
            <param name="data">需要校验的数据，带CRC校验码</param>
            <param name="CH">多项式码高位</param>
            <param name="CL">多项式码低位</param>
            <returns>返回校验成功与否</returns>
        </member>
        <member name="M:HslCommunication.Serial.SoftCRC16.CRC16(System.Byte[])">
            <summary>
            获取对应的数据的CRC校验码，默认多项式码为0xA001
            </summary>
            <param name="data">需要校验的数据，不包含CRC字节</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="M:HslCommunication.Serial.SoftCRC16.CRC16(System.Byte[],System.Byte,System.Byte)">
            <summary>
            通过指定多项式码来获取对应的数据的CRC校验码
            </summary>
            <param name="data">需要校验的数据，不包含CRC字节</param>
            <param name="CL">多项式码地位</param>
            <param name="CH">多项式码高位</param>
            <returns>返回带CRC校验码的字节数组，可用于串口发送</returns>
        </member>
        <member name="T:HslCommunication.Serial.SerialBase">
            <summary>
            所有串行通信类的基类，提供了一些基础的服务
            </summary>
        </member>
        <member name="F:HslCommunication.Serial.SerialBase.SP_ReadData">
            <summary>
            用于通信的基础串口
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.SerialPortInni(System.String)">
            <summary>
            初始化串口信息
            </summary>
        </member>
        <member name="M:HslCommunication.Serial.SerialBase.SerialPortInni(System.Action{System.IO.Ports.SerialPort})">
            <summary>
            根据自定义初始化方法进行初始化串口信息
            </summary>
        </member>
        <member name="T:HslCommunication.HslZipped">
            <summary>
            一个负责压缩解压数据字节的类
            </summary>
        </member>
        <member name="M:HslCommunication.HslZipped.CompressBytes(System.Byte[])">
            <summary>
            压缩字节数据
            </summary>
            <param name="bytes">等待被压缩的数据</param>
            <returns>压缩之后的数据</returns>
        </member>
        <member name="M:HslCommunication.HslZipped.Decompress(System.Byte[])">
            <summary>
            解压压缩后的数据
            </summary>
            <param name="bytes">压缩后的数据</param>
            <returns>压缩前的原始数据</returns>
        </member>
    </members>
</doc>
